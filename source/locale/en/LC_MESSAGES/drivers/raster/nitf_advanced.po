# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/drivers/raster/nitf_advanced.rst:5
msgid "NITF -- Advanced Driver Information"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:7
msgid ""
"The NITF (National Imagery Transmission Format) driver in GDAL includes a"
" number of advanced, and somewhat esoteric options not suitable for the "
":ref:`general end user documentation <raster.nitf>` for the driver. This "
"information is collected here, and is primarily aimed at developers and "
"advanced users."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:14
msgid "CGM Segments"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:16
msgid ""
"NITF files that have CGM data (that is segment type GR - graphics, or SY "
"with an STYPE value of 'C') will make that information available as "
"metadata in the CGM domain. The returned metadata will look something "
"like:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:32
msgid ""
"The SLOC_ROW and SLOC_COL values are the placement of the CGM object "
"relative to the base (SALVL) image. The CCS_ROW/COL values are relative "
"to the common coordinate system. The \\_SDLVL is the display level. The "
"DATA is the raw CGM data with \"backslash quotable\" escaping applied. "
"All occurrences of ASCII zero will be translated to '\\0', and all "
"backslashes and double quotes will be backslashed escaped. The "
"CPLUnescapeString() function can be used to unescape the data into binary"
" format using scheme CPLES_BackslashQuotable."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:41
msgid ""
"To add CGM data to a NITF image, you can pass creation options in the "
"following format:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:53
msgid ""
"Notice that passing CGM as creation options will overwrite existing CGM "
"segment read in the CGM metadata domain."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:56
msgid ""
"While GDAL does not support parsing or rendering CGM data, at least one "
"user has found the `UniConverter "
"<http://sk1project.org/modules.php?name=Products&product=uniconvertor>`__"
" library useful for this purpose."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:62
msgid "Multi-Image NITF Files"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:64
msgid ""
"NITF files with more than one image segment (IM) will present the image "
"segments as subdatasets. Opening a multiple NITF file by filename will "
"provide access to the first image segment. The subdataset metadata for a "
"3 image NITF file might look like:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:79
msgid ""
"In this case opening \"multi_image_jpeg_2.0.ntf\" directly will give "
"access to \"NITF_IM:0:multi_image_jpeg_2.0.ntf\". To open the others use "
"the corresponding subdataset names. The Subdataset mechanism is generic "
"GDAL concept discussed in the :ref:`raster_data_model` document."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:85
msgid "Text Segments"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:87
msgid ""
"NITF files that have text segments (that is segment type TX) will make "
"that information available as metadata in the TEXT domain. The returned "
"metadata will look something like:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:108
msgid ""
"The argument to DATA_n is the raw text of the n'th (zero based) text "
"segment with no escaping of any kind applied."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:111
msgid ""
"The TEXT segment header data is preserved in HEADER_n metadata item. The "
"CreateCopy() method on the NITF driver also supports creating text "
"segments on the output file as long as the input file has metadata in the"
" TEXT domain as defined above."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:116
msgid ""
"To add TEXT data to a NITF image, you can also pass creation options in "
"the following format:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:126
msgid ""
"Notice that passing TEXT as creation options will overwrite existing text"
" segment read in the TEXT metadata domain."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:130
msgid "TREs"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:132
msgid ""
"NITF files with registered (or unregistered?) extensions on the file "
"header, or the referenced image header will make them available in a raw "
"form in metadata via the TRE domain. The TRE domain will hold one "
"metadata item per TRE which will have the name of the TRE as the name, "
"and the data of the TRE as the contents. The data contents will be "
"\"backslash escaped\" like CGM data above."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:139
msgid ""
"In case of multiple occurrences of the same TRE, the second occurrence "
"will be named \"TRENAME_2\", the third \"TRENAME_3\" where TRENAME is the"
" TRE name."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:157
msgid "TREs as xml:TRE"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:159
msgid ""
"All TREs found in file and matching one of the TRE description of the "
"`nitf_spec.xml "
"<http://trac.osgeo.org/gdal/browser/trunk/gdal/data/nitf_spec.xml>`__ in "
"GDAL data directory will be reported as XML content in the xml:TRE "
"metadata domain."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:217
msgid "TRE creation from hexadecimal data"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:219
msgid ""
"TRE data can be added to a newly created NITF file in hexadecimal format "
"to encode binary data such as unsigned int or floating point types.  The "
"hexadecimal TRE creation option is supplied as "
"\"TRE=HEX/<tre_name>=<hex_tre_data>\" or "
"\"FILE_TRE=HEX/<tre_name>=<hex_tre_data>"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:229
msgid "TRE creation as TRE_OVERFLOW DES"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:231
msgid ""
"The following example shows how to create a CSEPHA TRE as a TRE_OVERFLOW "
"DES:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:262
msgid ""
"Note the use of the RESERVE_SPACE_FOR_TRE_OVERFLOW=YES creation option to"
" reserve space for the IXSOFL field in the image subheader pointed by "
"DESITEM."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:267
msgid "Data Extension Segments (xml:DES)"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:268
msgid ""
"Data Extension Segments (DESs) are user-defined metadata extensions to "
"the NITF format. The DES metadata is available through the xml\\:DES "
"metadata domain.  The xml\\:DES domain returns an XML string with "
"standard and user-defined DES fields in plain text, and the user-defined "
"DES data as Base64 encoded text.  The following is an example XML "
"structure:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:289
msgid "Raw File / Image Headers"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:291
msgid ""
"In some cases application may need to recover very specific information "
"from the image or file headers that isn't normally available as metadata."
" In this case it is possible to query the \"NITF_METADATA\" metadata "
"domain. The complete file and image headers will be returned as metadata "
"in base64 encoded format. Something like:"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:303
msgid ""
"Note that the ascii encoded numeric values prefixing the base64 encoded "
"header is the length (decoded) in bytes, followed by one space."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:307
msgid "Writing multiple Image Segments"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:309
msgid "(GDAL >= 3.4)"
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:311
msgid ""
"Writing a NITF file with several image segments is done with the "
"``APPEND_SUBDATASET=YES`` creation option but requires some care."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:314
msgid ""
"The file must be created with the content of the first image segment with"
" the ``NUMI`` creation option to specify the total number of image "
"segments and optionally with the ``NUMDES`` creation option with the "
"number of DE segments. TREs that apply to the whole file should also be "
"specified at that stage. The ``APPEND_SUBDATASET`` creation option must "
"NOT be specified."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:320
msgid ""
"Subsequent images are appended with the ``APPEND_SUBDATASET=YES`` "
"creation option. The ``IDLVL``, ``IALVL``, ``ILOCROW`` and ``ILOCCOL`` "
"creation option may be specified."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:323
msgid ""
"On the last image segment, the DES content, if any must be specified with"
" the ``DES`` creation option."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:326
msgid "The file will only be valid if all NUMI images have been actually written."
msgstr ""

#: ../../source/drivers/raster/nitf_advanced.rst:328
msgid "Example:"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:5
msgid "RFC 16: OGR Thread Safety"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:7
msgid "Author: Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:9
msgid "Contact: warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:11
msgid "Status: Development"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:16
msgid ""
"In an effort to better support thread safety in OGR some methods are "
"added as internal infrastructure is updated."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:20
msgid "Definitions"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:22
msgid ""
"*Reentrant*: A reentrant function can be called simultaneously by "
"multiple threads provided that each invocation of the function references"
" unique data."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:26
msgid ""
"*Thread-safe*: A thread-safe function can be called simultaneously by "
"multiple threads when each invocation references shared data. All access "
"to the shared data is serialized."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:31
msgid "Objective"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:33
msgid ""
"To make all of the OGR core and selected drivers reentrant, and to make "
"the driver registrar, drivers and datasources at least potentially "
"thread-safe."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:38
msgid "TestCapability()"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:40
msgid ""
"The TestCapability() method on the driver, and datasource will be "
"extended to include ways of testing for reentrancy and thread safety on "
"particular instances. The following macros will be added:"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:51
msgid "Meaning:"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:53
msgid ""
"OLCReentrant: The layer class is reentrant. Multiple threads can operate "
"on distinct instances of this class - including different layers on a "
"single datasource."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:56
msgid ""
"ODsCReentrant: The datasource class is reentrant. Multiple threads can "
"operate on distinct instances of this class."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:58
msgid ""
"ODsCThreadSafe: The datasource class is thread-safe. Multiple threads can"
" operate on a single instance of this class."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:60
msgid ""
"ODsCLayerClones: The OGRDataSource::GetLayerClone() method is supported, "
"and returns a layer instance with distinct state from the default layer "
"returned by GetLayer()."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:64
msgid ""
"Note that a single layer instance cannot be threadsafe as long as layer "
"feature reading status is implicit in the layer object. The default "
"return value for all test values is FALSE, as is normal for the "
"TestCapability() method, but specific drivers can return TRUE after "
"determining that the driver datasources or layers are in fact reentrant "
"and/or threadsafe."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:72
msgid "OGRSFDriverRegistrar"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:74
msgid ""
"Various changes have already been made to make the driver registrar "
"thread safe, primarily by protecting operations on it with a mutex."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:78
msgid "OGRSFDriver"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:80
msgid ""
"No changes are required to the OGRSFDriver base class for thread safety, "
"primarily because it does almost nothing."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:84
msgid "OGRDataSource"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:86
msgid ""
"This class has been modified to include an m_hMutex class data member "
"which is a mutex used to ensure thread safe access to internal "
"datastructures such as the layer list. Classes derived from OGRDataSource"
" that wish to implement threadsafe operation should use this mutex when "
"exclusivity is required."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:92
msgid "A new method is added to this class:"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:98
msgid ""
"The default implementation of this method returns NULL. If the "
"ODsCLayerClones capability is true for the datasource, this method must "
"return duplicates of the requested layer that have distinct feature "
"reading state. That is they can have their own spatial and attribute "
"filter settings, and the internal feature iterator (for GetNextFeature() "
"and ResetReading()) is distinct from other OGRLayer instances referencing"
" the same underlying datasource layer."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:106
msgid ""
"The intention of this method in the multi-threaded context is that "
"different threads can have clones of a layer with distinct read state. A "
"sort of poor-mans threadsafety, even though in fact it is just "
"reentrancy."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:111
msgid ""
"Layers return by GetLayerClone() should be released with the "
"OGRDataSource::ReleaseResultSet() method, much like layers returned by "
"ExecuteSQL()."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:116
msgid "ExecuteSQL()"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:118
msgid ""
"The default OGR implementation of OGRDataSource::ExecuteSQL() internally "
"uses and modifies the layer state (feature iterators and filters) and as "
"such is not appropriate to use on a datasource that is attempting to be "
"threadsafe even though it is understood that individual layers are not "
"threadsafe."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:124
msgid ""
"The proposed solution is that this code will be modified to use "
"GetLayerClone() if the datasource supports GetLayerClone()."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:128
msgid "Testing"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:130
msgid ""
"A multi-threaded C++ test harnass will be implemented for read-only "
"stress testing of datasources claiming to support reentrancy and "
"threadsafety."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:134
msgid ""
"No testing of reentrancy and threadsafety will be incorporated into the "
"regression test suite (gdalautotest) as it does not appear to be "
"practical."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:139
msgid "Implementation"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:141
msgid ""
"Frank Warmerdam will implement all the core features of this RFC for the "
"GDAL/OGR 1.5.0 release. As well the Shapefile, Personal Geodatabase, ODBC"
" and Oracle drivers will implement OLCReentrant, ODsCLayerClones, "
"ODsCReentrant and ODsThreadSafe."
msgstr ""


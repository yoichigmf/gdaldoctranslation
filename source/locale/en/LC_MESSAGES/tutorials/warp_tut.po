# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/tutorials/warp_tut.rst:5
msgid "GDAL Warp API tutorial (Reprojection, ...)"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:10
msgid "Overview"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:12
msgid ""
"The GDAL Warp API (declared in :ref:`gdalwarper.h <gdalwarp_cpp>`) "
"provides services for high performance image warping using application "
"provided geometric transformation functions (GDALTransformerFunc), a "
"variety of resampling kernels, and various masking options. Files much "
"larger than can be held in memory can be warped."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:14
msgid ""
"This tutorial demonstrates how to implement an application using the Warp"
" API. It assumes implementation in C++ as C and Python bindings are "
"incomplete for the Warp API. It also assumes familiarity with the "
":ref:`raster_data_model`, and the general GDAL API."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:16
msgid ""
"Applications normally perform a warp by initializing a "
":cpp:class:`GDALWarpOptions` structure with the options to be utilized, "
"instantiating a GDALWarpOperation based on these options, and then "
"invoking the :cpp:func:`GDALWarpOperation::ChunkAndWarpImage` method to "
"perform the warp options internally using the :cpp:class:`GDALWarpKernel`"
" class."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:19
msgid "A Simple Reprojection Case"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:20
msgid ""
"First we will construct a relatively simple example for reprojecting an "
"image, assuming an appropriate output file already exists, and with "
"minimal error checking."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:70
msgid ""
"This example opens the existing input and output files (in.tif and "
"out.tif). A :cpp:class:`GDALWarpOptions` structure is allocated "
"(:cpp:func:`GDALCreateWarpOptions` sets lots of sensible defaults for "
"stuff, always use it for defaulting things), and the input and output "
"file handles, and band lists are set. The panSrcBands and panDstBands "
"lists are dynamically allocated here and will be free automatically by "
":cpp:func:`GDALDestroyWarpOptions`. The simple terminal output progress "
"monitor (GDALTermProgress) is installed for reporting completion progress"
" to the user."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:72
msgid ""
":cpp:func:`GDALCreateGenImgProjTransformer` is used to initialize the "
"reprojection transformation between the source and destination images. We"
" assume that they already have reasonable bounds and coordinate systems "
"set. Use of GCPs is disabled."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:74
msgid ""
"Once the options structure is ready, a GDALWarpOperation is instantiated "
"using them, and the warp actually performed with "
":cpp:func:`GDALWarpOperation::ChunkAndWarpImage`. Then the transformer, "
"warp options and datasets are cleaned up."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:76
msgid ""
"Normally error check would be needed after opening files, setting up the "
"reprojection transformer (returns NULL on failure), and initializing the "
"warp."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:79
msgid "Other Warping Options"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:81
msgid ""
"The GDALWarpOptions structures contains a number of items that can be set"
" to control warping behavior. A few of particular interest are:"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:83
msgid ""
":cpp:member:`GDALWarpOptions::dfWarpMemoryLimit` - Set the maximum amount"
" of memory to be used by the GDALWarpOperation when selecting a size of "
"image chunk to operate on. The value is in bytes, and the default is "
"likely to be conservative (small). Increasing the chunk size can help "
"substantially in some situations but care should be taken to ensure that "
"this size, plus the GDAL cache size plus the working set of GDAL, your "
"application and the operating system are less than the size of RAM or "
"else excessive swapping is likely to interfere with performance. On a "
"system with 256MB of RAM, a value of at least 64MB (roughly 64000000 "
"bytes) is reasonable. Note that this value does not include the memory "
"used by GDAL for low level block caching."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:85
msgid ""
":cpp:member:`GDALWarpOptions::eResampleAlg` - One of GRA_NearestNeighbour"
" (the default, and fastest), GRA_Bilinear (2x2 bilinear resampling) or "
"GRA_Cubic. The GRA_NearestNeighbour type should generally be used for "
"thematic or color mapped images. The other resampling types may give "
"better results for thematic images, especially when substantially "
"changing resolution."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:87
msgid ""
":cpp:member:`GDALWarpOptions::padfSrcNoDataReal` - This array (one entry "
"per band being processed) may be setup with a \"nodata\" value for each "
"band if you wish to avoid having pixels of some background value copied "
"to the destination image."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:89
msgid ""
":cpp:member:`GDALWarpOptions::papszWarpOptions` - This is a string list "
"of NAME=VALUE options passed to the warper. See the "
":cpp:member:`GDALWarpOptions::papszWarpOptions` docs for all options. "
"Supported values include:"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:91
msgid ""
"INIT_DEST=[value] or INIT_DEST=NO_DATA: This option forces the "
"destination image to be initialized to the indicated value (for all "
"bands) or indicates that it should be initialized to the NO_DATA value in"
" padfDstNoDataReal/padfDstNoDataImag. If this value isn't set the "
"destination image will be read and the source warp overlaid on it."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:93
msgid ""
"WRITE_FLUSH=YES/NO: This option forces a flush to disk of data after each"
" chunk is processed. In some cases this helps ensure a serial writing of "
"the output data otherwise a block of data may be written to disk each "
"time a block of data is read for the input buffer resulting in a lot of "
"extra seeking around the disk, and reduced IO throughput. The default at "
"this time is NO."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:96
msgid "Creating the Output File"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:98
msgid ""
"In the previous case an appropriate output file was already assumed to "
"exist. Now we will go through a case where a new file with appropriate "
"bounds in a new coordinate system is created. This operation doesn't "
"relate specifically to the warp API. It is just using the transformation "
"API."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:168
msgid "Some notes on this logic:"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:170
msgid ""
"We need to create the transformer to output coordinates such that the "
"output of the transformer is georeferenced, not pixel line coordinates "
"since we use the transformer to map pixels around the source image into "
"destination georeferenced coordinates."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:172
msgid ""
"The :cpp:func:`GDALSuggestedWarpOutput` function will return an "
"adfDstGeoTransform, nPixels and nLines that describes an output image "
"size and georeferenced extents that should hold all pixels from the "
"source image. The resolution is intended to be comparable to the source, "
"but the output pixels are always square regardless of the shape of input "
"pixels."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:174
msgid ""
"The warper requires an output file in a format that can be \"randomly\" "
"written to. This generally limits things to uncompressed formats that "
"have an implementation of the Create() method (as opposed to "
"CreateCopy()). To warp to compressed formats, or CreateCopy() style "
"formats it is necessary to produce a full temporary copy of the image in "
"a better behaved format, and then CreateCopy() it to the desired final "
"format."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:176
msgid ""
"The Warp API copies only pixels. All color maps, georeferencing and other"
" metadata must be copied to the destination by the application."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:179
msgid "Performance Optimization"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:181
msgid ""
"There are a number of things that can be done to optimize the performance"
" of the warp API:"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:183
msgid ""
"Increase the amount of memory available for the Warp API chunking so that"
" larger chunks can be operated on at a time. This is the "
":cpp:member:`GDALWarpOptions::dfWarpMemoryLimit` parameter. In theory the"
" larger the chunk size operated on the more efficient the I/O strategy, "
"and the more efficient the approximated transformation will be. However, "
"the sum of the warp memory and the GDAL cache should be less than RAM "
"size, likely around 2/3 of RAM size."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:185
msgid ""
"Increase the amount of memory for GDAL caching. This is especially "
"important when working with very large input and output images that are "
"scanline oriented. If all the input or output scanlines have to be re-"
"read for each chunk they intersect performance may degrade greatly. Use "
":cpp:func:`GDALSetCacheMax` to control the amount of memory available for"
" caching within GDAL."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:187
msgid ""
"Use an approximated transformation instead of exact reprojection for each"
" pixel to be transformed. This code illustrates how an approximated "
"transformation could be created based on a reprojection transformation, "
"but with a given error threshold (dfErrorThreshold in output pixels)."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:196
msgid ""
"When writing to a blank output file, use the INIT_DEST option in the "
":cpp:member:`GDALWarpOptions::papszWarpOptions` to cause the output "
"chunks to be initialized to a fixed value, instead of being read from the"
" output. This can substantially reduce unnecessary IO work."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:198
msgid ""
"Use tiled input and output formats. Tiled formats allow a given chunk of "
"source and destination imagery to be accessed without having to touch a "
"great deal of extra image data. Large scanline oriented files can result "
"in a great deal of wasted extra IO."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:200
msgid ""
"Process all bands in one call. This ensures the transformation "
"calculations don't have to be performed for each band."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:202
msgid ""
"Use the :cpp:func:`GDALWarpOperation::ChunkAndWarpMulti` method instead "
"of :cpp:func:`GDALWarpOperation::ChunkAndWarpImage`. It uses a separate "
"thread for the IO and the actual image warp operation allowing more "
"effective use of CPU and IO bandwidth. For this to work GDAL needs to "
"have been built with multi-threading support (default on Win32, default "
"on Unix, for previous versions -with-threads was required in configure)."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:204
msgid ""
"The resampling kernels vary in work required from nearest neighbour being"
" least complex, to more complex with bilinear and then cubic. Don't use a"
" more complex resampling kernel than needed."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:206
msgid ""
"Avoid use of esoteric masking options so that special simplified logic "
"case be used for common special cases. For instance, nearest neighbour "
"resampling with no masking on 8bit data is highly optimized compared to "
"the general case."
msgstr ""

#: ../../source/tutorials/warp_tut.rst:209
msgid "Other Masking Options"
msgstr ""

#: ../../source/tutorials/warp_tut.rst:211
msgid ""
"The GDALWarpOptions include a bunch of esoteric masking capabilities, for"
" validity masks, and density masks on input and output. Some of these are"
" not yet implemented and others are implemented but poorly tested. Other "
"than per-band validity masks it is advised that these features be used "
"with caution at this time."
msgstr ""


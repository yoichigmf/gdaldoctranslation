# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:5
msgid "RFC 24: GDAL Progressive Data Support"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:7
msgid "Author: Norman Barker, Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:9
msgid "Contact: nbarker@ittvis.com, warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:11
msgid "Status: Adopted"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:16
msgid ""
"Provide an interface for asynchronous/streaming data access in GDAL. The "
"initial implementation is for JPIP, but should be generic enough to apply"
" to other streaming / progressive approaches. Background on the JPIP "
"(Kakadu) implementation can be found in [wiki:rfc24_jpipkak]."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:22
msgid "Interfaces"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:25
msgid "GDALAsyncReader"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:27
msgid ""
"This new class is intended to represent an active asynchronous raster "
"imagery request. The request includes information on a source window on "
"the dataset, a target buffer size (implies level of decimation or "
"replication), the buffer type, buffer interleaving, data buffer and bands"
" being requested. Essentially the same sort of information that is passed"
" in a GDALDataset::!RasterIO() request."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:34
msgid ""
"The GetNextUpdatedRegion() method can be used to wait for an update to "
"the imagery buffer, and to find out what area was updated. The "
"LockBuffer() and UnlockBuffer() methods can be used to temporarily "
"disable updates to the buffer while application code accesses the buffer."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:40
msgid ""
"While an implementation of the simple accessors is provided as part of "
"the class, it is intended that the class be subclassed as part of "
"implementation of a particular driver, and custom implementations of "
"GetNextUpdatedRegion(), LockBuffer() and UnlockBuffer() provided."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:45
msgid ""
"{{{ class CPL_DLL GDALAsyncReader { protected: GDALDataset\\* poDS; int "
"nXOff; int nYOff; int nXSize; int nYSize; void \\* pBuf; int nBufXSize; "
"int nBufYSize; GDALDataType eBufType; int nBandCount; int\\* panBandMap; "
"int nPixelSpace; int nLineSpace; int nBandSpace; long nDataRead;"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:50
msgid ""
"public: GDALAsyncReader(GDALDataset\\* poDS = NULL); virtual "
"~GDALAsyncReader();"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:81
msgid "}; }}}"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:84
msgid "GetNextUpdatedRegion()"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:105
msgid ""
"The async return status list is as follows, and will be declared in "
"gdal.h."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:119
msgid "The meaning as a return value is:"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:121
msgid ""
"GARIO_PENDING: No imagery was altered in the buffer, but there is still "
"activity pending, and the application should continue to call "
"GetNextUpdatedRegion() as time permits."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:124
msgid ""
"GARIO_UPDATE: Some of the imagery has been updated, but there is still "
"activity pending."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:126
msgid ""
"GARIO_ERROR: Something has gone wrong. The asynchronous request should be"
" ended."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:128
msgid ""
"GARIO_COMPLETE: An update has occurred and there is no more pending work "
"on this request. The request should be ended and the buffer used."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:133
msgid "GDALDataset"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:135
msgid ""
"The GDALDataset class is extended with methods to create an asynchronous "
"reader, and to cleanup the asynchronous reader. It is intended that these"
" methods would be subclassed by drivers implementing asynchronous data "
"access."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:151
msgid ""
"It is expected that as part of gdal/gcore a default !GDALAsyncReader "
"implementation will be provided that just uses GDALDataset::!RasterIO() "
"to perform the request as a single blocking request. However, this "
"default implementation will ensure that applications can use the "
"asynchronous interface without worrying whether a particular format will "
"actually operate asynchronously."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:159
msgid "GDALDriver"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:161
msgid ""
"In order to provide a hint to applications whether particular formats "
"support asynchronous IO, we will add a new metadata item on the "
"GDALDriver of implementing formats. The metadata item will be "
"\"DCAP_ASYNCIO\" (macro GDAL_DCAP_ASYNCIO) and will have the value "
"\"YES\" if asynchronous IO is available."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:167
msgid ""
"Implementing drivers will do something like this in their driver setup "
"code:"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:175
msgid "GDALRasterBand"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:177
msgid ""
"There are no changes to the GDALRasterBand interface for asynchronous "
"raster IO. Asynchronous IO requests can only be made at the dataset "
"level, not the band."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:182
msgid "C API"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:184
msgid ""
"The following C API wrappers for the C++ classes and methods will be "
"added. Note that at this time there is no intention to provide C wrappers"
" for all the GDALAsyncReader accessors since the provided information is "
"already available in the application from the call launching the async "
"io."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:213
msgid "SWIG"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:215
msgid ""
"It is intended that all the above functions in the C API will be wrapped "
"for SWIG."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:219
msgid "Driver Implementations"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:221
msgid ""
"A full implementation of the Asynchronous API will be provided as the "
"JPIPKAK driver - a JPIP protocol implementation using the Kakadu library."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:225
msgid "At this time, no other implementations are planned."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:228
msgid "Testing"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:230
msgid ""
"Some testing of the asynchronous api against normal drivers will be added"
" in the test suite, as well as testing of the JPIPKAK driver in "
"asynchronous and conventional data access methods."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:234
msgid ""
"Also, a new commandline program, gdalasyncread, is implemented which "
"provides a mechanism to test the async API from the commandline. It takes"
" a subset of the gdal_translate commandline options."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:5
msgid "RFC 54: Dataset transactions"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:7
msgid "Authors: Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:9
msgid "Contact: even dot rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:11
msgid "Status: Adopted, implemented in GDAL 2.0"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:16
msgid ""
"This RFC introduces an API to offer a transaction mechanism at dataset "
"level and uses it in the PostgreSQL, SQLite and GPKG drivers. It also "
"reworks significantly how transactions are handled in the PostgreSQL "
"driver. It also introduces a generic mechanism to implement an emulation "
"of transactions for datasources that would not natively support it, and "
"uses it in the FileGDB driver."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:24
msgid "Rationale"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:26
msgid ""
"The current abstraction offers a transaction API at the layer level. "
"However, this is generally misleading since, when it is implemented in "
"DBMS with BEGIN/COMMIT/ROLLBACK sql statements (PostgreSQL, SQLite, GPKG,"
" PGDump, MSSQLSpatial), the semantics is really a transaction at database"
" level that spans over all layers/tables. So even if calling "
"StartTransaction() on a layer, it also extends on the changes done on "
"other layers. In a very few drivers "
"StartTransaction()/CommitTransaction() is sometimes used as a mechanism "
"to do bulk insertion. This is for example the case of WFS, CartoDB, GFT, "
"GME. For some of them, it could rather be at dataset level too since "
"potentially multiple layer modifications could be stacked together."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:38
msgid ""
"Furthermode some use cases require updating several layers consistently, "
"hence the need for a real database level transaction abstraction."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:41
msgid ""
"The current situation of various drivers is the following (some of the "
"below observations resulting from the analysis are kept mainly for the "
"benefit of developers that would need to work in the drivers) :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:46
msgid "PostgreSQL"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:48
msgid "A few facts about cursors used to run GetNextFeature() requests:"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:50
msgid ""
"Cursors are needed for retrieval of huge amount of data without being "
"memory bound."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:52
msgid "Cursors need transactions to run."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:53
msgid ""
"Default cursors (WITHOUT HOLD) cannot be used outside of the transaction "
"that created tem"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:55
msgid ""
"You cannot modify the structure of a table while the transaction (yes, "
"the transaction, not the cursor) is still active and if you do that on "
"another connection, it hangs until the other connection commits or "
"rollbacks)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:59
msgid ""
"Within a transaction, deleted/modified rows are only visible if they are "
"done before declaring the cursor."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:61
msgid ""
"Cursors WITH HOLD: may be used outside of transaction but cause a copy of"
" the table to be done --> bad for performance"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:64
msgid "Current flaws are :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:66
msgid ""
"one cannot do interleaved layer reading (beyond the first 500 features "
"fetched, can be easily seen with OGR_PG_CURSOR_PAGE=1) due to the "
"underlying implicit transaction created to read layer A being closed when"
" the reading of layer B starts."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:70
msgid ""
"GetFeature() flushes the current transaction and starts a new one to do a"
" cursor SELECT. Which is unnecessary since we retrieve only one record"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:73
msgid ""
"SetAttributeFilter() issues a ResetReading() which currently "
"FlushSoftTransaction() the ongoing transaction. Can be annoying in a "
"scenario with long update where you need transactional guarantee"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:77
msgid "What works :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:79
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:90
msgid "Transaction support at the layer level forwarded to datasource."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:80
msgid "Interleaved writing works (even with copy mode)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:83
msgid "SQLite/GPKG"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:85
msgid ""
"Mechanisms used to read table content (sqlite3_prepare() / "
"sqlite3_step()) do not need transactions."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:87
msgid ""
"Step sees structure modifications (e.g. column addition) if run after "
"prepared statement but before first step."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:89
msgid "Step sees row modifications/additions as soon as they occur."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:93
msgid "MySQL"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:95
msgid ""
"Cannot do interleaved layer reading (reading in one layer resets the "
"other reading) because of the use of mysql_use_result() that can work "
"with one single request at a time. mysql_store_result() would be a "
"solution but requires ingesting the whole result set into memory, which "
"is inpractical for big layers."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:100
msgid ""
"step does not set row changes once the query has started (if done through"
" another connection, because if done through ExecuteSQL() the long "
"transaction is interrupted)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:103
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:110
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:117
msgid "No transaction support"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:106
msgid "OCI"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:108
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:115
msgid "Interleaved layer reading works"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:109
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:116
msgid "Changes done after SELECT seem not to be seen."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:113
msgid "FileGDB"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:120
msgid "Proposed changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:123
msgid "GDALDataset changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:125
msgid ""
"The following methods are added to GDALDataset (and usable by "
"OGRDataSource which inherits from GDALDataset)."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:218
msgid ""
"Note: in the GDALDataset class itself, those methods have an empty "
"implementation that returns OGRERR_UNSUPPORTED_OPERATION."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:221
msgid "Those 3 methods are mapped at the C level as :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:229
msgid "Two news dataset capabilities are added :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:231
msgid ""
"ODsCTransactions: True if this datasource supports (efficient) "
"transactions."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:233
msgid ""
"ODsCEmulatedTransactions: True if this datasource supports transactions "
"through emulation."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:237
msgid "Emulated transactions"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:239
msgid ""
"A new function OGRCreateEmulatedTransactionDataSourceWrapper() is added "
"for used by drivers that do not natively support transactions but want an"
" emulation of them. It could potentially be adopted by any datasource "
"whose data is supported by files/directories."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:279
msgid "The definition of the IOGRTransactionBehaviour interface is the following:"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:343
msgid "OPGRLayer changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:345
msgid ""
"At the OGRLayer level, the documentation of GetNextFeature() receives the"
" following additional information to clarify its semantics :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:359
msgid "PG driver changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:361
msgid ""
"Dataset level transactions have been implemented, and use of implicitly "
"created transactions reworked."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:364
msgid "Interleaved layer reading is now possible."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:366
msgid ""
"GetFeature() has been modified to run without a cursor or a transaction, "
"and all other calls to transactions have been checked/modified to not "
"reset accidentally a transaction initiated by the user."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:370
msgid ""
"Below the new behavior as described in the updated drv_pg_advanced.html "
"help page :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:493
msgid ""
"It is recommended to do operations within explicit transactions for ease "
"of mind (some troubles fixing ogr_pg.py, but which does admittedly weird "
"things like reopening connections, which does not fly very well with "
"'implicit' transactions)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:499
msgid "GPKG and SQLite driver changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:501
msgid ""
"Dataset level transactions have been implemented. A few fixes made here "
"and there to avoid resetting accidentally a transaction initiated by the "
"user."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:506
msgid "FileGDB driver changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:508
msgid ""
"The FileGDB driver uses the above described emulation to offer a "
"transaction mechanism. This works by backing up the current state of a "
"geodatabase when StartTransaction(force=TRUE) is called. If the "
"transaction is committed, the backup copy is destroyed. If the "
"transaction is rolled back, the backup copy is restored. So this might be"
" costly when operating on huge geodatabases. Note that this emulation has"
" an unspecified behavior in case of concurrent updates (with different "
"connections in the same or another process)."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:518
msgid "SWIG bindings (Python / Java / C# / Perl) changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:520
msgid "The following additions have been done :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:522
msgid "Dataset.StartTransaction(int force=FALSE)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:523
msgid "Dataset.CommitTransaction()"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:524
msgid "Dataset.RollbackTransaction()"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:525
msgid "ogr.ODsCTransactions constant"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:526
msgid "ogr.ODsCEmulatedTransactions constant"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:529
msgid "Utilities"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:531
msgid ""
"ogr2ogr now uses dataset transactions (instead of layer transactions) if "
"ODsCTransactions is advertized."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:535
msgid "Documentation"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:537
msgid ""
"New/modified API are documented. MIGRATION_GUIDE.TXT updated with mention"
" to below compatibility issues."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:541
msgid "Test Suite"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:543
msgid "The test suite is extended to test"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:545
msgid "updated drivers: PG, GPKG, SQLite, FileGDB"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:546
msgid "use of database transactions by ogr2ogr"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:549
msgid "Compatibility Issues"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:551
msgid ""
"As described above, subtle behavior changes can be observed with the PG "
"driver, related to implicit transactions that were flushed before and are"
" no longer now, but this should hopefully be restricted to non-typical "
"use cases. So some cases that \"worked\" before might no longer work, but"
" the new behavior should hopefully be more understandable."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:558
msgid ""
"The PG and SQLite drivers could accept apparently nested calls to "
"StartTransaction() (at the layer level). This is no longer possible since"
" they are now redirected to dataset transactions, that explicitly do not "
"support it."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:564
msgid "Out of scope"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:566
msgid ""
"The following drivers that implement BEGIN/COMMIT/ROLLBACK could be later"
" enhanced to support dataset transactions: OCI, MySQL, MSSQLSpatial."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:570
msgid "GFT, CartoDB, WFS could also benefit for dataset transactions."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:572
msgid ""
"VRT currently supports layer transactions (if the underlying dataset "
"support it, and excluding union layers). If dataset transaction were to "
"be implemented, should it consist in forwarding dataset transaction to "
"source dataset(s) ? Implementation might be complicated in case the same "
"dataset is used by multiple sources, but more fundamentally one cannot "
"guarantee ACID on multiple datasets."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:580
msgid "Related tickets"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:582
msgid ""
"A proposed revision on how transactions are implemented in the PG driver "
"was proposed a long time ago (`https://trac.osgeo.org/gdal/ticket/1265 "
"<https://trac.osgeo.org/gdal/ticket/1265>`__) to solve some of the above "
"issues. The patch no longer applies but it is expected that the changes "
"done for this RFC cover the issues that the ticket wanted to address."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:590
msgid "Implementation"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:592
msgid ""
"Implementation will be done by Even Rouault (`Spatialys "
"<http://spatialys.com>`__), and sponsored by `LINZ (Land Information New "
"Zealand) <http://www.linz.govt.nz/>`__."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:596
msgid ""
"The proposed implementation lies in the \"rfc54_dataset_transactions\" "
"branch of the "
"`https://github.com/rouault/gdal2/tree/rfc54_dataset_transactions "
"<https://github.com/rouault/gdal2/tree/rfc54_dataset_transactions>`__ "
"repository."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:601
msgid ""
"The list of changes: "
"`https://github.com/rouault/gdal2/compare/rfc54_dataset_transactions "
"<https://github.com/rouault/gdal2/compare/rfc54_dataset_transactions>`__"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:605
msgid "Voting history"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:607
msgid "+1 from JukkaR, HowardB and EvenR"
msgstr ""


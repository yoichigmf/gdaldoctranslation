# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc88_googletest.rst:5
msgid "RFC 88: Use GoogleTest framework for C/C++ unit tests"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:8
msgid "Author:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:8
msgid "Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:9
msgid "Contact:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:9
msgid "even.rouault @ spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:10
msgid "Started:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:10
msgid "2022-Nov-16"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:11
msgid "Status:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:11
msgid "Adopted, implemented"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:12
msgid "Target:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:12
msgid "GDAL 3.7"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:16
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:18
msgid ""
"The document proposes and describes conversion of the existing C/C++ "
"autotest suite to use the `GoogleTest framework "
"<https://github.com/google/googletest>`__."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:22
msgid ""
"GoogleTest is a popular and maintained framework for C/C++ test writing, "
"that is a better replacement for the `TUT framework "
"<https://github.com/mrzechonek/tut-framework>`__ that we use currently."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:27
msgid "Motivation"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:29
msgid ""
"The current TUT framework was adopted in 2006, and copied from the GEOS "
"project. While it works reasonably well, its use has the following "
"drawbacks:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:32
msgid ""
"TUT has little upstream activity. The last tagged release was apparently "
"in 2016."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:35
msgid "We have an internal copy in our repository that might have diverged."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:37
msgid ""
"TUT is, to the best of our understanding, not very popular among C/C++ "
"projects that have a regression test suite, which adds a (small) learning"
" curve to new contributors."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:41
msgid ""
"One of TUT main practical disadvantages is that it is not obvious to know"
" which assertion has failed in a given test, unless adding a text string "
"describing the assertion, and often redundant with it. Like "
"``ensure_equals(\"x = 2\", x, 2);`` or some number like "
"``ensure_equals(\"(1)\", x, 2);``. In GoogleTest, you just write "
"``EXPECT_EQ(x, 2);`` and if it fails the filename and line number will be"
" printed in the error log, as well as the value of ``x``. With "
"GoogleTest, you may also provide additional context that will be output "
"when an assertion fails to help diagnose the reason of the failure, e.g.:"
" ``EXPECT_EQ(x, 2) << \"if that matters, y = \" << y;``"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:52
msgid ""
"Another issue I stumbled upon a few months ago is that the default limit "
"for a given test group is 50 steps. If you don't increase it explicitly, "
"tests beyond the 50th one will be compiled but not run, without any "
"compile or runtime failure. One might easily believe they are successful "
"when they are not run at all!"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:57
msgid "A few GoogleTest advantages:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:59
msgid ""
"It has been adopted by PROJ as its C/C++ test framework, and it makes "
"sense to use the same technologies whenever it makes sense given the "
"relationship of the 2 projects."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:63
msgid "It has extensive documentation: https://google.github.io/googletest/"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:65
msgid ""
"GoogleTest distinguishes assertions that must abort the test when failed "
"(ASSERT_xxxx) from those where the test can continue (EXPECT_xxxx), which"
" can be useful."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:69
msgid ""
"The only noticed inconvenience of GoogleTest-based tests is that they "
"might be quite slow to compile in optimized mode (probably related to "
"https://github.com/google/googletest/issues/1478). I've found that "
"forcing non-optimized mode when building tests reduces build time of "
"tests to a reasonable amount, while not having practical disadvantages: "
"it still allows to test the library built in optimized mode. This is what"
" is done in the candidate implementation."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:77
msgid ""
"This RFC doesn't change the logic of deciding when C/C++-based vs Python-"
"based tests should be written. My own position is that Python-based tests"
" should be preferred when possible, as productivity is higher in Python "
"and there is no associated compilation time (compilation time affects "
"feedback received from continuous integration). C/C++-based test should "
"be reserved for C++-specific aspects that cannot be tested with the SWIG "
"Python bindings, which use the C interface. For example testing of C++ "
"operators (copy/move constructors/assignment operators, iterator "
"interfaces, etc.) or C/C++ functionality not mapped to SWIG (e.g. CPL "
"utility functions/classes)"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:88
msgid "Technical details"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:90
msgid ""
"GoogleTest >= 1.10 will be required. If available in the system, the "
"system GoogleTest library will be used. Otherwise the CMake "
"ExternalProject_Add() functionality is used to download and built it "
"transparently. Use of system vs downloaded framework can be controlled "
"with the USE_EXTERNAL_GTEST=YES/NO CMake variable. This logic is copied &"
" pasted from PROJ."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:96
msgid ""
"All assertion based tests will be migrated to GoogleTest. The few "
"performance tests that don't have any assertions and do not use TUT will "
"be kept unmodified (at least for now)."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:100
msgid "The autotest/cpp/tut directory will be removed."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:102
msgid "The migration from TUT to GoogleTest is mostly mechanical:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:104
msgid "TUT groups                   ==> GoogleTest test suite or fixture"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:105
msgid "``ensure_equals(a,b)``       ==> ``ASSERT_EQ(a,b)`` or ``EXPECT(a,b)``"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:106
msgid "``ensure(a)``                ==> ``ASSERT_TRUE(a)`` or ``EXPECT(a)``"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:107
msgid ""
"``ensure_almost_equal(a,b)`` ==> ``ASSERT_NEAR(a,b,tolerance)`` or "
"``EXPECT_NEAR(a,b,tolerance)``"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:108
msgid "``ensure(a >= b)``           ==> ``ASSERT_GE(a,b)`` or ``EXPECT_GE(a,b)``"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:109
msgid "etc."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:111
msgid ""
"Customized ensure logic like ``ensure_equal_geometries(geom1, geom2)`` "
"can also be migrated cleanly as functions that result an AssertionResult:"
" https://google.github.io/googletest/advanced.html#using-a-function-that-"
"returns-an-assertionresult"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:115
msgid ""
"``GTEST_SKIP() << \"reason for the skip\"`` can be used to skip tests for"
" which a build-time or run-time requirement is missing."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:118
msgid ""
"GoogleTest also offers capabilities for parametrized tests that were not "
"existing in TUT and can be adopted where it makes sense."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:121
msgid ""
"For example the following test in TUT that tested GDALDataTypeUnion() on "
"all potential combinations of (datatype1, datatype2)"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:147
msgid "can be written in GoogleTest as"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:197
msgid ""
"While it is admittedly more verbose (which is an exception, as for "
"simpler tests, the GoogleTest way is generally smaller than the TUT way) "
"but much more expressive when looking at the test run output, where each "
"combination is run as a given named test, and thus if failure occurs, it "
"is easy to spot which combination failed, whereas with TUT you had to add"
" manual instrumentation:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:218
msgid "Backward compatibility"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:220
msgid ""
"None. This doesn't affect the library, nor the release source code "
"archive which don't include the autotest/ directory."
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:224
msgid "Related tickets and PRs:"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:226
msgid "Ticket: https://github.com/OSGeo/gdal/issues/3525"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:228
msgid "Implementation: https://github.com/OSGeo/gdal/pull/6732"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:231
msgid "Voting history"
msgstr ""

#: ../../source/development/rfc/rfc88_googletest.rst:233
msgid ""
"+1from PSC members MateuszL, HowardB, JukkaR, KurtS , FrankW, DanielM and"
" EvenR"
msgstr ""


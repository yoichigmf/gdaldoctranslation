# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-25 01:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/drivers/vector/pg.rst:4
msgid "PostgreSQL / PostGIS"
msgstr ""

#: ../../source/drivers/vector/pg.rst:10
msgid ""
"This driver implements support for access to spatial tables in PostgreSQL"
" extended with the `PostGIS <http://postgis.net/>`__ spatial data "
"support. Some support exists in the driver for use with PostgreSQL "
"without PostGIS but with less functionalities."
msgstr ""

#: ../../source/drivers/vector/pg.rst:15
msgid ""
"This driver requires a connection to a Postgres database. If you want to "
"prepare a SQL dump to inject it later into a Postgres database, you can "
"instead use the :ref:`PostgreSQL SQL Dump driver <vector.pgdump>`."
msgstr ""

#: ../../source/drivers/vector/pg.rst:19
msgid ""
"You can find additional information on the driver in the :ref:`Advanced "
"OGR PostgreSQL driver Information <vector.pg_advanced>` page."
msgstr ""

#: ../../source/drivers/vector/pg.rst:22
msgid ""
"Starting with GDAL 3.9, only PostgreSQL >= 9 and PostGIS >= 2 are "
"supported."
msgstr ""

#: ../../source/drivers/vector/pg.rst:25
msgid "Driver capabilities"
msgstr ""

#: ../../source/drivers/vector/pg.rst:32
msgid "Connecting to a database"
msgstr ""

#: ../../source/drivers/vector/pg.rst:37
msgid ""
"To connect to a Postgres datasource, use a connection string specifying "
"the database name, with additional parameters as necessary. The PG: "
"prefix is used to mark the name as a postgres connection string."
msgstr ""

#: ../../source/drivers/vector/pg.rst:43
msgid "*or*"
msgstr ""

#: ../../source/drivers/vector/pg.rst:49
msgid ""
"In this syntax each parameter setting is in the form keyword = value. "
"Spaces around the equal sign are optional. To write an empty value, or a "
"value containing spaces, surround it with single quotes, e.g., keyword = "
"'a value'. Single quotes and backslashes within the value must be escaped"
" with a backslash, i.e., \\' and \\\\."
msgstr ""

#: ../../source/drivers/vector/pg.rst:56
msgid "Starting with GDAL 3.1 also this syntax is supported:"
msgstr ""

#: ../../source/drivers/vector/pg.rst:63
msgid "Starting with GDAL 3.4, the URI syntax is also supported"
msgstr ""

#: ../../source/drivers/vector/pg.rst:70
msgid ""
"It's also possible to omit the database name and connect to a *default* "
"database, with the same name as the user name."
msgstr ""

#: ../../source/drivers/vector/pg.rst:72
msgid ""
"**Note**: We use PQconnectdb() to make the connection. See details from "
"`PostgreSQL libpq documentation <https://www.postgresql.org/docs/12"
"/libpq-connect.html>`__)."
msgstr ""

#: ../../source/drivers/vector/pg.rst:76
msgid "Geometry columns"
msgstr ""

#: ../../source/drivers/vector/pg.rst:78
msgid ""
"If the *geometry_columns* table exists (i.e. PostGIS is enabled for the "
"accessed database), then all tables and named views listed in the "
"*geometry_columns* table will be treated as OGR layers. Otherwise "
"(PostGIS disabled for the accessed database), all regular user tables and"
" named views will be treated as layers."
msgstr ""

#: ../../source/drivers/vector/pg.rst:84
msgid ""
"The driver also supports the `geography "
"<http://postgis.net/docs/manual-1.5/ch04.html#PostGIS_Geography>`__ "
"column type."
msgstr ""

#: ../../source/drivers/vector/pg.rst:88
msgid ""
"The driver also supports reading and writing the following non-linear "
"geometry types :CIRCULARSTRING, COMPOUNDCURVE, CURVEPOLYGON, MULTICURVE "
"and MULTISURFACE"
msgstr ""

#: ../../source/drivers/vector/pg.rst:93
msgid "SQL statements"
msgstr ""

#: ../../source/drivers/vector/pg.rst:95
msgid ""
"The PostgreSQL driver passes SQL statements directly to PostgreSQL by "
"default, rather than evaluating them internally when using the "
"ExecuteSQL() call on the OGRDataSource, or the -sql command option to "
"ogr2ogr. Attribute query expressions are also passed directly through to "
"PostgreSQL. It's also possible to request the ogr Pg driver to handle SQL"
" commands with the :ref:`OGR SQL <ogr_sql_dialect>` engine, by passing "
"**\"OGRSQL\"** string to the ExecuteSQL() method, as the name of the SQL "
"dialect."
msgstr ""

#: ../../source/drivers/vector/pg.rst:104
msgid ""
"Note that the PG driver uses PostgreSQL cursors to browse through the "
"result set of a ExecuteSQL() request, and that, at time of writing, "
"PostgreSQL default settings aren't optimized when the result set is small"
" enough to fit in one result page. If you experiment bad performance, "
"specifying the ``PRELUDE_STATEMENTS=SET cursor_tuple_fraction = 1.0;`` "
"open option might help."
msgstr ""

#: ../../source/drivers/vector/pg.rst:110
msgid ""
"The PostgreSQL driver in OGR supports the "
"OGRDataSource::StartTransaction(), OGRDataSource::CommitTransaction() and"
" OGRDataSource::RollbackTransaction() calls in the normal SQL sense."
msgstr ""

#: ../../source/drivers/vector/pg.rst:115
msgid "Creation Issues"
msgstr ""

#: ../../source/drivers/vector/pg.rst:117
msgid ""
"The PostgreSQL driver does not support creation of new datasets (a "
"database within PostgreSQL), but it does allow creation of new layers "
"within an existing database."
msgstr ""

#: ../../source/drivers/vector/pg.rst:121
msgid ""
"As mentioned above the type system is impoverished, and many OGR types "
"are not appropriately mapped into PostgreSQL."
msgstr ""

#: ../../source/drivers/vector/pg.rst:124
msgid ""
"If the database has PostGIS types loaded (i.e. the geometry type), newly "
"created layers will be created with the PostGIS Geometry type. Otherwise "
"they will use OID."
msgstr ""

#: ../../source/drivers/vector/pg.rst:128
msgid ""
"By default it is assumed that text being sent to Postgres is in the UTF-8"
" encoding. This is fine for plain ASCII, but can result in errors for "
"extended characters (ASCII 155+, LATIN1, etc). While OGR provides no "
"direct control over this, you can set the PGCLIENTENCODING environment "
"variable to indicate the format being provided. For instance, if your "
"text is LATIN1 you could set the environment variable to LATIN1 before "
"using OGR and input would be assumed to be LATIN1 instead of UTF-8. An "
"alternate way of setting the client encoding is to issue the following "
"SQL command with ExecuteSQL() : \"SET client_encoding TO encoding_name\" "
"where encoding_name is LATIN1, etc. Errors can be caught by enclosing "
"this command with a CPLPushErrorHandler()/CPLPopErrorHandler() pair."
msgstr ""

#: ../../source/drivers/vector/pg.rst:141
msgid "Updating existing tables"
msgstr ""

#: ../../source/drivers/vector/pg.rst:142
msgid ""
"When data is appended to an existing table (for example, using the "
"``-append`` option in ``ogr2ogr``) the driver will, by default, emit an "
"INSERT statement for each row of data to be added. This may be "
"significantly slower than the COPY-based approach taken when creating a "
"new table, but ensures consistency of unique identifiers if multiple "
"connections are accessing the table simultaneously."
msgstr ""

#: ../../source/drivers/vector/pg.rst:149
msgid ""
"If only one connection is accessing the table when data is appended, the "
"COPY-based approach can be chosen by setting the config option "
"``PG_USE_COPY`` to ``YES``, which may significantly speed up the "
"operation."
msgstr ""

#: ../../source/drivers/vector/pg.rst:154
msgid "Dataset open options"
msgstr ""

#: ../../source/drivers/vector/pg.rst:235
msgid "Dataset Creation Options"
msgstr ""

#: ../../source/drivers/vector/pg.rst:237
msgid "None"
msgstr ""

#: ../../source/drivers/vector/pg.rst:240
msgid "Layer Creation Options"
msgstr ""

#: ../../source/drivers/vector/pg.rst:390
msgid "Configuration Options"
msgstr ""

#: ../../source/drivers/vector/pg.rst:392
msgid "The following :ref:`configuration options <configoptions>` are available:"
msgstr ""

#: ../../source/drivers/vector/pg.rst:453
msgid "Examples"
msgstr ""

#: ../../source/drivers/vector/pg.rst:455
msgid ""
"Simple translation of a shapefile into PostgreSQL. The table 'abc' will "
"be created with the features from abc.shp and attributes from abc.dbf. "
"The database instance (warmerda) must already exist, and the table abc "
"must not already exist."
msgstr ""

#: ../../source/drivers/vector/pg.rst:464
msgid ""
"This second example loads a political boundaries layer from VPF (via the "
":ref:`OGDI driver <vector.ogdi>`), and renames the layer from the cryptic"
" OGDI layer name to something more sensible. If an existing table of the "
"desired name exists it is overwritten."
msgstr ""

#: ../../source/drivers/vector/pg.rst:475
msgid "Export a single Postgres table to GeoPackage:"
msgstr ""

#: ../../source/drivers/vector/pg.rst:483
msgid "Export many Postgres tables to GeoPackage:"
msgstr ""

#: ../../source/drivers/vector/pg.rst:491
msgid "Export a whole Postgres database to GeoPackage:"
msgstr ""

#: ../../source/drivers/vector/pg.rst:500
msgid "Load a single layer GeoPackage into Postgres:"
msgstr ""

#: ../../source/drivers/vector/pg.rst:510
msgid ""
"In this example we merge tiger line data from two different directories "
"of tiger files into one table. Note that the second invocation uses "
"-append and no :lco:`OVERWRITE=yes`."
msgstr ""

#: ../../source/drivers/vector/pg.rst:521
msgid ""
"This example shows using ogrinfo to evaluate an SQL query statement "
"within PostgreSQL. More sophisticated PostGIS specific queries may also "
"be used via the -sql commandline switch to ogrinfo."
msgstr ""

#: ../../source/drivers/vector/pg.rst:529
msgid ""
"This example shows using ogrinfo to list PostgreSQL/PostGIS layers on a "
"different host."
msgstr ""

#: ../../source/drivers/vector/pg.rst:536
msgid ""
"This example shows use of :oo:`PRELUDE_STATEMENTS` and "
":oo:`CLOSING_STATEMENTS` as destination open options of ogr2ogr."
msgstr ""

#: ../../source/drivers/vector/pg.rst:544
msgid "FAQs"
msgstr ""

#: ../../source/drivers/vector/pg.rst:546
msgid ""
"**Why can't I see my tables? PostGIS is installed and I have data** You "
"must have permissions on all tables you want to read *and* "
"geometry_columns and spatial_ref_sys. Misleading behavior may follow "
"without an error message if you do not have permissions to these tables. "
"Permission issues on geometry_columns and/or spatial_ref_sys tables can "
"be generally confirmed if you can see the tables by setting the "
"configuration option :config:`PG_LIST_ALL_TABLES` to YES. (e.g. ``ogrinfo"
" --config PG_LIST_ALL_TABLES YES PG:xxxxx``)"
msgstr ""

#: ../../source/drivers/vector/pg.rst:557
msgid "See Also"
msgstr ""

#: ../../source/drivers/vector/pg.rst:559
msgid ":ref:`Advanced OGR PostgreSQL driver Information <vector.pg_advanced>`"
msgstr ""

#: ../../source/drivers/vector/pg.rst:560
msgid ":ref:`OGR PostgreSQL SQL Dump driver Page <vector.pgdump>`"
msgstr ""

#: ../../source/drivers/vector/pg.rst:561
msgid "`PostgreSQL Home Page <http://www.postgresql.org/>`__"
msgstr ""

#: ../../source/drivers/vector/pg.rst:562
msgid "`PostGIS <http://postgis.net/>`__"
msgstr ""

#: ../../source/drivers/vector/pg.rst:563
msgid ""
"`PostGIS / OGR Wiki Examples Page "
"<http://trac.osgeo.org/postgis/wiki/UsersWikiOGR>`__"
msgstr ""

#~ msgid "Driver short name"
#~ msgstr ""

#~ msgid "PostgreSQL"
#~ msgstr ""

#~ msgid "Build dependencies"
#~ msgstr ""

#~ msgid "PostgreSQL client library (libpq)"
#~ msgstr ""

#~ msgid ""
#~ "At time of writing, PgPoolII is "
#~ "not compatible with COPY mode as "
#~ "used by the OGR PostgreSQL driver. "
#~ "Thus you should force PG_USE_COPY=NO "
#~ "when using PgPoolII."
#~ msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/testing.rst:7
msgid "Automated testing"
msgstr ""

#: ../../source/development/testing.rst:9
msgid ""
"GDAL includes a comprehensive test suite, implemented using a combination"
" of Python (via pytest) and C++ (via gtest)."
msgstr ""

#: ../../source/development/testing.rst:11
msgid ""
"After building GDAL using CMake, the complete test suite can be run using"
" ``ctest -v --output-on-failure``. This will automatically set "
"environment variables so that tests are run on the the built version of "
"GDAL, rather than an installed system copy."
msgstr ""

#: ../../source/development/testing.rst:15
msgid "Running a subset of tests using ``ctest``"
msgstr ""

#: ../../source/development/testing.rst:17
msgid ""
"The complete set of test suites known to ``ctest`` can be viewed running "
"``ctest -N``."
msgstr ""

#: ../../source/development/testing.rst:19
msgid ""
"A subset of tests can be run using the ``-R`` argument to ``ctest``, "
"which selects tests using a provided regular expression. For example, "
"``ctest -R autotest`` would run the Python-based tests."
msgstr ""

#: ../../source/development/testing.rst:22
msgid ""
"The ``-E`` argument can be used to exclude tests using a regular "
"expression. For example, ``ctest -E gdrivers`` would exclude the suite of"
" driver tests."
msgstr ""

#: ../../source/development/testing.rst:25
msgid "Running a subset of tests using ``pytest``"
msgstr ""

#: ../../source/development/testing.rst:27
msgid ""
"The test subsets exposed by ``ctest`` are still rather large and some may"
" take several minutes to run. If a higher level of specificity is needed,"
" ``pytest`` can be called directly to run groups of tests or individual "
"tests. Before running ``pytest``, it is important to set environment "
"variables so that the development build of GDAL is tested, rather than a "
"system version. This can be done by sourcing the following from the build"
" directory:"
msgstr ""

#: ../../source/development/testing.rst:36
msgid ""
"(with adjustments to the above path if the build directory is not a "
"subdirectory of the GDAL source root). To verify that environment "
"variables were set correctly, you can check the version of a GDAL binary:"
msgstr ""

#: ../../source/development/testing.rst:44
msgid "and the Python bindings:"
msgstr ""

#: ../../source/development/testing.rst:51
msgid ""
"Tests can then be run by calling ``pytest``, for example on an individual"
" file. On Linux and MacOS builds, the tests are symlinked into the build "
"directory, so this can be done by running the following from the build "
"directory:"
msgstr ""

#: ../../source/development/testing.rst:59
msgid ""
"On Windows, the test files remain in the source tree, but the pytest "
"configuration file ``pytest.ini`` is only available in the build "
"directory. To accommodate this, the above command would be modified as "
"follows:"
msgstr ""

#: ../../source/development/testing.rst:65
msgid ""
"A subset of tests within an individual test file can be run by providing "
"a regular expression to the ``-k`` argument to ``pytest``."
msgstr ""

#: ../../source/development/testing.rst:71
msgid ""
"``pytest`` can also report information on the tests without running them."
" For example, to list tests containing \"tiff\" in the name:"
msgstr ""

#: ../../source/development/testing.rst:79
msgid ""
"Not all Python tests can be run independently; some tests depend on state"
" set by a previous tests in the same file."
msgstr ""

#: ../../source/development/testing.rst:83
msgid "Checking for memory leaks and access errors using Valgrind"
msgstr ""

#: ../../source/development/testing.rst:85
msgid ""
"The GDAL unit test suite can be run using the Valgrind tool to detect "
"memory errors such as leaks and incorrect reads/writes."
msgstr ""

#: ../../source/development/testing.rst:88
msgid ""
"The test suite will run considerably slower under Valgrind (perhaps by a "
"factor of ten) so it is generally advisable to run a subset of the tests "
"using the methods described above."
msgstr ""

#: ../../source/development/testing.rst:92
msgid ""
"Calling ``valgrind ctest`` will _not_ run the tests under ``valgrind``. "
"Although it is possible to use Valgrind with ctest, it is simpler to call"
" ``pytest`` or ``gdal_unit_test`` directly."
msgstr ""

#: ../../source/development/testing.rst:96
msgid ""
"The following preparatory steps are necessary to avoid numerous false-"
"positive errors from Valgrind:"
msgstr ""

#: ../../source/development/testing.rst:99
msgid ""
"Many false-positive errors are generated by Python itself. Most of these "
"can be removed by obtaining a suppression file that corresponds to the "
"version of the Python interpreter used to run the tests. This file can be"
" located in a source distribution of Python, or downloaded directly from "
"GitHub (for example, at "
"https://raw.githubusercontent.com/python/cpython/3.11/Misc/valgrind-"
"python.supp)"
msgstr ""

#: ../../source/development/testing.rst:106
msgid ""
"A few false-positive errors are generated by the GDAL test suite or "
"libraries that it uses (e.g., SWIG, numpy). These can be removed by "
"``autotest/valgrind-gdal.supp`` file in the GDAL repository."
msgstr ""

#: ../../source/development/testing.rst:110
msgid ""
"When running Python unit tests, the default system memory allocator "
"should be used instead of Python's internal memory allocator. This can be"
" done by setting the ``PYTHONMALLOC`` environment variable to ``malloc``."
msgstr ""

#: ../../source/development/testing.rst:114
msgid ""
"When running Python unit tests, Valgrind will report numerous \"Invalid "
"file descriptor\" warnings that cannot currently be suppressed. These can"
" be removed from the output using ``grep -v \"invalid file "
"descriptor\\|alternative log fd\"``."
msgstr ""

#: ../../source/development/testing.rst:119
msgid ""
"Combining the following, we can run valgrind for a subset of Python tests"
" as follows:"
msgstr ""

#: ../../source/development/testing.rst:130
msgid ""
"To avoid verbose commands such as the one above, it may be useful to "
"reference the suppression files and other common arguments in a "
"``~/.valgrindrc`` file."
msgstr ""

#: ../../source/development/testing.rst:136
msgid "Recommendations on how to write new tests"
msgstr ""

#: ../../source/development/testing.rst:138
msgid ""
"Python-based tests should be preferred when possible, as productivity is "
"higher in Python and there is no associated compilation time (compilation"
" time affects feedback received from continuous integration)."
msgstr ""

#: ../../source/development/testing.rst:142
msgid ""
"C/C++-based test should be reserved for C++-specific aspects that cannot "
"be tested with the SWIG Python bindings, which use the C interface. For "
"example testing of C++ operators (copy/move constructors/assignment "
"operators, iterator interfaces, etc.) or C/C++ functionality not mapped "
"to SWIG (e.g. CPL utility functions/classes)"
msgstr ""

#: ../../source/development/testing.rst:148
msgid "Python tests"
msgstr ""

#: ../../source/development/testing.rst:150
msgid ""
"Python tests use the `pytest <https://docs.pytest.org/en/latest/>`__ "
"framework since :ref:`rfc-72`."
msgstr ""

#: ../../source/development/testing.rst:153
msgid ""
"Test cases should be written in a way where they are independent from "
"other ones, so they can potentially be run in a isolated way or in "
"parallel of other test cases. In particular temporary files should be "
"created with a name that cannot conflict with other tests: preferably use"
" pytest's ```tmp_path`` fixture <https://docs.pytest.org/en/7.1.x/how-"
"to/tmp_path.html#the-tmp-path-fixture>`__."
msgstr ""

#: ../../source/development/testing.rst:158
msgid ""
"Use ``@pytest.mark.require_driver(driver_name)`` as an annotation for a "
"test case that requires an optional driver to be present."
msgstr ""

#: ../../source/development/testing.rst:161
msgid ""
"Use ``pytestmark = pytest.mark.require_driver(\"driver_name\")`` towards "
"the beginning of a test file that requires a given driver to be available"
" for all its test cases. This is typically when writing tests for a "
"particular driver."
msgstr ""

#: ../../source/development/testing.rst:166
msgid ""
"Use ``@pytest.mark.require_run_on_demand`` as an annotation to signal a "
"test that should not be run by default, typically because it requires "
"special pre-conditions, use a lot of RAM, etc. and is thus not "
"appropriate to be automatically run by continuous integration."
msgstr ""

#: ../../source/development/testing.rst:171
msgid ""
"Use ``@pytest.mark.parametrize(...)`` as an annotation for test functions"
" that test for variations, instead of for() constructs. More details at "
"https://docs.pytest.org/en/latest/parametrize.html"
msgstr ""

#: ../../source/development/testing.rst:175
msgid "e.g.:"
msgstr ""

#: ../../source/development/testing.rst:184
msgid "instead of"
msgstr ""

#: ../../source/development/testing.rst:193
msgid ""
"`Fixtures <https://docs.pytest.org/en/latest/how-to/fixtures.html>`__ can"
" be used to share set-up and tear-down code between test cases."
msgstr ""

#: ../../source/development/testing.rst:196
msgid ""
"e.g. a fixture automatically loaded for all test cases of a test file, "
"that takes care to unregister a given driver before the test case is run,"
" and re-register it afterwards:"
msgstr ""

#: ../../source/development/testing.rst:215
msgid ""
"or a fixture that runs preliminary checks to discover if a driver has "
"some optional capabilities, and skip a test case if not:"
msgstr ""

#: ../../source/development/testing.rst:240
msgid "C++ tests"
msgstr ""

#: ../../source/development/testing.rst:242
msgid ""
"GDAL C++ tests use the `GoogleTest "
"<https://github.com/google/googletest>`__ framework since :ref:`rfc-88`."
msgstr ""

#: ../../source/development/testing.rst:245
msgid ""
"Common non-failing assertions are: ``EXPECT_TRUE(cond)``, "
"``EXPECT_FALSE(cond)``, ``EXPECT_EQ(a, b)``, ``EXPECT_NE(a, b)``, "
"``EXPECT_STREQ(a, b)``, ``EXPECT_LE(a, b)``, ``EXPECT_LT(a, b)``, "
"``EXPECT_GE(a, b)``, ``EXPECT_GT(a, b)``, ``EXPECT_NEAR(a, b, "
"tolerance)`` If one of those assertions fail, the execution of the rest "
"of the test cases continues, hence they should not typically be used if "
"testing a pointer against NULL and dereferencing it unconditionally "
"afterwards. The ASSERT_xxxx family of assertions should be used for such "
"cases where early exit of the test case is desired."
msgstr ""

#: ../../source/development/testing.rst:254
msgid "GoogleTest also offers capabilities for parametrized tests. For example:"
msgstr ""

#: ../../source/development/testing.rst:306
msgid "Test coverage reports"
msgstr ""

#: ../../source/development/testing.rst:308
msgid ""
"GDAL continuous integration has a ``coverage`` configuration that builds "
"GDAL with the ``gcov`` GCC module to get the line coverage of running "
"Python and C++ autotest tests."
msgstr ""

#: ../../source/development/testing.rst:312
msgid ""
"This is used by the `Coveralls GitHub Action "
"<https://github.com/marketplace/actions/coveralls-github-action>`__ to "
"upload results to https://coveralls.io/github/OSGeo/gdal, for both push "
"and pull requests events."
msgstr ""

#: ../../source/development/testing.rst:316
msgid ""
"A somewhat nicer looking output of line coverage results for the latest "
"master build, generated by ``lcov``, is also available at https"
"://gdalautotest-coverage-results.github.io/coverage_html/index.html"
msgstr ""

#~ msgid ""
#~ "The test subsets exposed by ``ctest``"
#~ " are still rather large and some "
#~ "may take several minutes to run. "
#~ "If a higher level of specificity "
#~ "is needed, ``pytest`` can be called "
#~ "directly to run groups of tests or"
#~ " individual tests. Before running "
#~ "``pytest``, it is important to set "
#~ "environment variables so that the "
#~ "development build of GDAL is tested, "
#~ "rather than a system version. This "
#~ "can be done by sourcing the "
#~ "following from the build directory:"
#~ msgstr ""

#~ msgid ""
#~ "(with adjustments to the above path "
#~ "if the build directory is not a"
#~ " subdirectory of the GDAL source "
#~ "root). To verify that environment "
#~ "variables were set correctly, you can"
#~ " check the version of a GDAL "
#~ "binary:"
#~ msgstr ""

#~ msgid "and the Python bindings:"
#~ msgstr ""

#~ msgid ""
#~ "The test subsets exposed by ``ctest``"
#~ " are still rather large and some "
#~ "may take several minutes to run. "
#~ "If a higher level of specificity "
#~ "is needed, ``pytest`` can be called "
#~ "directly to run groups of tests or"
#~ " individual tests. Before running "
#~ "``pytest``, it is important to set "
#~ ":ref:`development environment variables "
#~ "<setting_dev_environment_variables>` so that the "
#~ "development build of GDAL is tested, "
#~ "rather than a system version."
#~ msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:5
msgid "RFC 15: Band Masks"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:7
msgid "Author: Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:9
msgid "Contact: warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:11
msgid "Status: Adopted"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:16
msgid ""
"Some file formats support a concept of a bitmask to identify pixels that "
"are not valid data. This can be particularly valuable with byte image "
"formats where a nodata pixel value can not be used because all pixel "
"values have a valid meaning. This RFC tries to formalize a way of "
"recognising and accessing such null masks through the GDAL API, while "
"moving to a uniform means of representing other kinds of masking (nodata "
"values, and alpha bands)."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:24
msgid ""
"The basic approach is to treat such masks as raster bands, but not "
"regular raster bands on the datasource. Instead they are freestanding "
"raster bands in a manner similar to the overview raster band objects. The"
" masks are represented as GDT_Byte bands with a value of zero indicating "
"nodata and non-zero values indicating valid data. Normally the value 255 "
"will be used for valid data pixels."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:32
msgid "API"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:34
msgid "GDALRasterBand is extended with the following methods:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:42
msgid "GDALDataset is extended with the following method:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:48
msgid ""
"Note that the GetMaskBand() should always return a GDALRasterBand mask, "
"even if it is only an all 255 mask with the flags indicating "
"GMF_ALL_VALID."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:52
msgid ""
"The GetMaskFlags() method returns an bitwise OR-ed set of status flags "
"with the following available definitions that may be extended in the "
"future:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:56
msgid ""
"GMF_ALL_VALID(0x01): There are no invalid pixels, all mask values will be"
" 255. When used this will normally be the only flag set."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:58
msgid ""
"GMF_PER_DATASET(0x02): The mask band is shared between all bands on the "
"dataset."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:60
msgid ""
"GMF_ALPHA(0x04): The mask band is actually an alpha band and may have "
"values other than 0 and 255."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:62
msgid ""
"GMF_NODATA(0x08): Indicates the mask is actually being generated from "
"nodata values. (mutually exclusive of GMF_ALPHA)"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:65
msgid ""
"The CreateMaskBand() method will attempt to create a mask band associated"
" with the band on which it is invoked, issuing an error if it is not "
"supported. Currently the only flag that is meaningful to pass in when "
"creating a mask band is GMF_PER_DATASET. The rest are used to represent "
"special system provided mask bands. GMF_PER_DATASET is assumed when "
"CreateMaskBand() is called on a dataset."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:73
msgid "Default GetMaskBand() / GetMaskFlags() Implementation"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:75
msgid ""
"The GDALRasterBand class will include a default implementation of "
"GetMaskBand() that returns one of three default implementations."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:78
msgid "If a corresponding .msk file exists it will be used for the mask band."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:80
msgid ""
"If the band has a nodata value set, an instance of the new "
"GDALNodataMaskRasterBand class will be returned. GetMaskFlags() will "
"return GMF_NODATA."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:83
msgid ""
"If there is no nodata value, but the dataset has an alpha band that seems"
" to apply to this band (specific rules yet to be determined) and that is "
"of type GDT_Byte then that alpha band will be returned, and the flags "
"GMF_PER_DATASET and GMF_ALPHA will be returned in the flags."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:88
msgid ""
"If neither of the above apply, an instance of the new "
"GDALAllValidRasterBand class will be returned that has 255 values for all"
" pixels. The null flags will return GMF_ALL_VALID."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:92
msgid ""
"The GDALRasterBand will include a protected poMask instance variable and "
"a bOwnMask flag. The first call to the default GetMaskBand() will result "
"in creation of the GDALNodataMaskRasterBand, GDALAllValidMaskRasterBand "
"and their assignment to poMask with bOwnMask set TRUE. If an alpha band "
"is identified for use, it will be assigned to poMask and bOwnMask set to "
"FALSE. The GDALRasterBand class will take care of deleting the poMask if "
"set and bOwnMask is true in the destructor. Derived band classes may "
"safely use the poMask and bOwnMask flag similarly as long as the "
"semantics are maintained."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:102
msgid ""
"For an external .msk file to be recognized by GDAL, it must be a valid "
"GDAL dataset, with the same name as the main dataset and suffixed with "
".msk, with either one band (in the GMF_PER_DATASET case), or as many "
"bands as the main dataset. It must have INTERNAL_MASK_FLAGS_xx metadata "
"items set at the dataset level, where xx matches the band number of a "
"band of the main dataset. The value of those items is a combination of "
"the flags GMF_ALL_VALID, GMF_PER_DATASET, GMF_ALPHA and GMF_NODATA. If a "
"metadata item is missing for a band, then the other rules explained above"
" will be used to generate a on-the-fly mask band."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:113
msgid "Default CreateMaskBand()"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:115
msgid ""
"The default implementation of the CreateMaskBand() method will be "
"implemented based on similar rules to the .ovr handling implemented using"
" the GDALDefaultOverviews object. A TIFF file with the extension .msk "
"will be created with the same basename as the original file, and it will "
"have as many bands as the original image (or just one for "
"GMF_PER_DATASET). The mask images will be deflate compressed tiled images"
" with the same block size as the original image if possible."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:123
msgid ""
"The default implementation of GetFileList() will also be modified to know"
" about the .msk files."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:127
msgid "CreateCopy()"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:129
msgid ""
"The GDALDriver::DefaultCreateCopy(), and GDALPamDataset::CloneInfo() "
"methods will be updated to copy mask information if it seems necessary "
"and is possible. Note that NODATA, ALL_VALID and ALPHA type masks are not"
" copied since they are just derived information."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:135
msgid "Alpha Bands"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:137
msgid ""
"When a dataset has a normal GDT_Byte alpha (transparency) band that "
"applies, it should be returned as the null mask, but the GetMaskFlags() "
"method should include GMF_ALPHA. For processing purposes any value other "
"than 0 should be treated as valid data, though some algorithms will treat"
" values between 1 and 254 as partially transparent."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:144
msgid "Drivers Updated"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:146
msgid "These drivers will be updated:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:148
msgid ""
"JPEG Driver: support the \"zlib compressed mask appended to the file\" "
"approach used by a few data providers."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:150
msgid "GRASS Driver: updated to support handling null values as masks."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:152
msgid "Possibly updated:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:154
msgid ""
"HDF4 Driver: This driver might possibly be updated to return real mask if"
" we can figure out a way."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:156
msgid ""
"SDE Driver: This driver might be updated if Howard has sufficient time "
"and enthusiasm."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:160
msgid "Utilities"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:162
msgid ""
"The gdalwarp utility and the gdal warper algorithm will be updated to use"
" null masks on input. The warper algorithm already uses essentially this "
"model internally. For now gdalwarp output (nodata or alpha band) will "
"remain unchanged, though at some point in the future support may be added"
" for explicitly generating null masks, but for most purposes producing an"
" alpha band is producing a null mask."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:170
msgid "Implementation Plan"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:172
msgid ""
"This change will be implemented by Frank Warmerdam in trunk in time for "
"the 1.5.0 release."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:176
msgid "SWIG Implications"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:178
msgid ""
"The GetMaskBand(), GetMaskFlags() and CreateMaskBand() methods (and "
"corresponding defines) will need to be added. The mask should work like a"
" normal raster band for swig purposes so minimal special work should be "
"required."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:184
msgid "Testing"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:186
msgid "The gdalautotest will be extended with the following:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:188
msgid ""
"gcore/mask.py: test default mask implementation for nodata, alpha and all"
" valid cases."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:190
msgid ""
"gdriver/jpeg.py: extend with a test for \"appended bitmask\" case - "
"creation and reading."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:193
msgid "Interactive testing will be done for gdalwarp."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/api/python_gotchas.rst:5
msgid "Python Gotchas in the GDAL and OGR Python Bindings"
msgstr ""

#: ../../source/api/python_gotchas.rst:7
msgid ""
"This page lists aspects of GDAL's and OGR's Python bindings that may "
"catch Python programmers by surprise. If you find something new, feel "
"free to open a pull request adding it to the list. Consider discussing it"
" on the `gdal-dev mailing list <https://lists.osgeo.org/mailman/listinfo"
"/gdal-dev>`__  first, to make sure you fully understand the issue and "
"that others agree that it is unexpected, \"non-Pythonic\", or something "
"that would catch many Python programmers by surprise. Be sure to "
"reference email threads, GitHub tickets, and other sources of additional "
"information."
msgstr ""

#: ../../source/api/python_gotchas.rst:13
msgid ""
"This list is not the place to report bugs. If you believe something is a "
"bug, please `open a ticket <https://github.com/OSGeo/gdal/issues>`__ and "
"report the problem to gdal-dev. Then consider listing it here if it is "
"something related to Python specifically. Do not list it here if it "
"relates to GDAL or OGR generally, and not the Python bindings "
"specifically."
msgstr ""

#: ../../source/api/python_gotchas.rst:16
msgid ""
"Not all items listed here are bugs. Some of these are just how GDAL and "
"OGR work and cannot be fixed easily without breaking existing code. If "
"you don't like how something works and think it should be changed, feel "
"free to discuss it on gdal-dev and see what can be done."
msgstr ""

#: ../../source/api/python_gotchas.rst:21
msgid "Gotchas that are by design... or per history"
msgstr ""

#: ../../source/api/python_gotchas.rst:23
msgid ""
"These are unexpected behaviors that are not considered by the GDAL and "
"OGR teams to be bugs and are unlikely to be changed due to effort "
"required, or whose fixing might affect backward compatibility, etc."
msgstr ""

#: ../../source/api/python_gotchas.rst:27
msgid ""
"Python bindings do not raise exceptions unless you explicitly call "
"``UseExceptions()``"
msgstr ""

#: ../../source/api/python_gotchas.rst:29
msgid ""
"By default, the GDAL and OGR Python bindings do not raise exceptions when"
" errors occur. Instead they return an error value such as ``None`` and "
"write an error message to ``sys.stdout``. For example, when you try to "
"open a non-existing dataset with GDAL:"
msgstr ""

#: ../../source/api/python_gotchas.rst:41
msgid ""
"In Python, it is traditional to report errors by raising exceptions. You "
"can enable this behavior in GDAL and OGR by calling the "
"``UseExceptions()`` function:"
msgstr ""

#: ../../source/api/python_gotchas.rst:58
msgid ""
"It is planned that exceptions will be enabled by default in GDAL 4.0. "
"Code that does not want exceptions to be raised in a future version of "
"GDAL should explicitly disable them with ``gdal.DontUseExceptions()``."
msgstr ""

#: ../../source/api/python_gotchas.rst:62
msgid ""
"Python crashes or throws an exception if you use an object after deleting"
" a related object"
msgstr ""

#: ../../source/api/python_gotchas.rst:64
msgid "Consider this example:"
msgstr ""

#: ../../source/api/python_gotchas.rst:74
msgid ""
"In this example, ``band`` has a relationship with ``dataset`` that "
"requires ``dataset`` to remain allocated in order for ``band`` to work. "
"If we delete ``dataset`` and then try to use ``band``, Python will throw "
"a confusing exception:"
msgstr ""

#: ../../source/api/python_gotchas.rst:88
msgid ""
"In GDAL 3.7 and earlier, using a band after the dataset has been "
"destroyed will cause a crash instead of an exception."
msgstr ""

#: ../../source/api/python_gotchas.rst:90
msgid ""
"This problem can manifest itself in subtle ways. For example, it can "
"occur if you try to instantiate a temporary dataset instance within a "
"single line of code:"
msgstr ""

#: ../../source/api/python_gotchas.rst:98
msgid ""
"In this example, the dataset instance was no longer needed after the call"
" to ``GetRasterBand()`` so Python deallocated it *before* calling "
"``Checksum()``."
msgstr ""

#: ../../source/api/python_gotchas.rst:112
msgid ""
"This example is the same case as above but it looks different. The "
"dataset object is only available in the ``load_band`` function and will "
"be deleted right after leaving the function."
msgstr ""

#: ../../source/api/python_gotchas.rst:116
msgid ""
"The problem is not restricted to GDAL band and dataset objects and "
"happens in other areas where objects have relationships with each other. "
"The issue occurs because deleting an object in Python causes not only the"
" C++ object behind it to be deallocated, but also other objects for which"
" that C++ object maintains ownership (e.g., a Dataset owning a Band, a "
"Feature owning a Geometry.) If the Python object associated with one of "
"these child objects retains a reference to that object, Python will crash"
" when the object is accessed. In common cases such as the Band/Dataset "
"relationship above, the GDAL bindings invalidate references to objects "
"that no longer exist so that an exception is thrown instead of a crash, "
"but the work is not complete."
msgstr ""

#: ../../source/api/python_gotchas.rst:127
msgid ""
"Unfortunately there is no complete list of such relationships, so you "
"have to watch for it yourself."
msgstr ""

#: ../../source/api/python_gotchas.rst:130
msgid ""
"Python crashes if you add a new field to an OGR layer when features "
"deriving from this layer definition are still active"
msgstr ""

#: ../../source/api/python_gotchas.rst:132
msgid "For example:"
msgstr ""

#: ../../source/api/python_gotchas.rst:142
msgid ""
"For more information, please see `#3552 "
"<https://trac.osgeo.org/gdal/ticket/3552>`__."
msgstr ""

#: ../../source/api/python_gotchas.rst:145
msgid ""
"Layers with attribute filters (``SetAttributeFilter()``) will only return"
" filtered features when using ``GetNextFeature()``"
msgstr ""

#: ../../source/api/python_gotchas.rst:147
msgid ""
"If you read the documentation for ``SetAttributeFilter()`` carefully you "
"will see the caveat about ``OGR_L_GetNextFeature()``. This means that if "
"you use ``GetFeature()``, instead of ``GetNextFeature()``, then you can "
"still access and work with features from the layer that are not covered "
"by the filter. ``GetFeatureCount()`` will respect the filter and show the"
" correct number of features filtered. However, working with "
"``GetFeatureCount()`` in a loop can lead to some subtle confusion. "
"Iterating over the Layer object or using ``GetNextFeature()`` should be "
"the default method for accessing features:"
msgstr ""

#: ../../source/api/python_gotchas.rst:162
msgid ""
"Certain objects contain a ``Destroy()`` method, but you should never use "
"it"
msgstr ""

#: ../../source/api/python_gotchas.rst:164
msgid ""
"You may come across examples that call the ``Destroy()`` method. `This "
"tutorial "
"<https://www.gis.usu.edu/~chrisg/python/2009/lectures/ospy_slides2.pdf>`__"
" even gives specific advice on page 12 about when to call ``Destroy``."
msgstr ""

#: ../../source/api/python_gotchas.rst:166
msgid ""
"Calling ``Destroy`` forces the underlying native object to be destroyed."
"  This is typically unnecessary because these objects are automatically "
"destroyed during garbage collection when no references to the Python "
"object remain."
msgstr ""

#: ../../source/api/python_gotchas.rst:170
msgid ""
"In most situations, it is not necessary to force the object to be "
"destroyed at a specific point in time. However, because the contents of "
"``gdal.Dataset`` and ``ogr.DataSource`` objects are only guaranteed to be"
" written to disk when the backing native object is destroyed, it may be "
"necessary to explicitly destroy these objects. In these cases, a context "
"manager (``with`` block) is often a good solution, e.g.:"
msgstr ""

#: ../../source/api/python_gotchas.rst:187
msgid ""
"If this is not possible, for example if the object needs to be destroyed "
"within a function, then the ``Close()`` method may be called."
msgstr ""

#: ../../source/api/python_gotchas.rst:192
msgid ""
"Context managers and the ``Close()`` method are available beginning in "
"GDAL 3.8. In earlier versions, ``Destroy()`` can be used for "
"``ogr.DataSource`` objects, or garbage collection may be forced by "
"destroying reference using ``del`` or setting variables to ``None``."
msgstr ""

#: ../../source/api/python_gotchas.rst:197
msgid ""
"With some drivers, raster datasets can be intermittently saved without "
"closing using ``FlushCache()``. Similarly, vector datasets can be saved "
"using ``SyncToDisk()``.  However, neither of these methods guarantee that"
" the data are written to disk, so the preferred method is to use a "
"context manager or call ``Close()``."
msgstr ""

#: ../../source/api/python_gotchas.rst:205
msgid "Exceptions raised in custom error handlers do not get caught"
msgstr ""

#: ../../source/api/python_gotchas.rst:207
msgid ""
"The python bindings allow you to specify a python callable as an error "
"handler (`#4993 <https://trac.osgeo.org/gdal/ticket/4993>`__). However, "
"these error handlers appear to be called in a separate thread and any "
"exceptions raised do not propagate back to the main thread (`#5186 "
"<https://trac.osgeo.org/gdal/ticket/5186>`__)."
msgstr ""

#: ../../source/api/python_gotchas.rst:210
msgid ""
"So if you want to  `catch warnings as well as errors "
"<https://gis.stackexchange.com/questions/43404/how-to-detect-a-gdal-ogr-"
"warning/68042>`__, something like this won't work:"
msgstr ""

#: ../../source/api/python_gotchas.rst:228
msgid "But you can do something like this instead:"
msgstr ""

#: ../../source/api/python_gotchas.rst:283
msgid "Gotchas that result from bugs or behaviors of other software"
msgstr ""

#: ../../source/api/python_gotchas.rst:286
msgid "Python crashes in GDAL functions when you upgrade or downgrade numpy"
msgstr ""

#: ../../source/api/python_gotchas.rst:288
msgid ""
"Much of GDAL's Python bindings are implemented in C++. Much of the core "
"of numpy is implemented in C. The C++ part of GDAL's Python bindings "
"interacts with the C part of numpy through numpy's ABI (application "
"binary interface). This requires GDAL's Python bindings to be compiled "
"using numpy header files that define numpy C data structures. Those data "
"structures sometimes change between numpy versions. When this happens, "
"the new version of numpy is not be compatible at the binary level with "
"the old version, and the GDAL Python bindings must be recompiled before "
"they will work with the new version of numpy. And when they are "
"recompiled, they probably won't work with the old version."
msgstr ""

#: ../../source/api/python_gotchas.rst:292
msgid ""
"If you obtained a precompiled version of GDAL's Python bindings, such as "
"the Windows packages from `http://gisinternals.com/sdk.php "
"<http://gisinternals.com/sdk.php>`__ be sure you look up what version of "
"numpy was used to compile them, and install that version of numpy on your"
" machine."
msgstr ""

#: ../../source/api/python_gotchas.rst:295
msgid ""
"Python bindings cannot be used successfully from ArcGIS in-process "
"geoprocessing tools (ArcGIS 9.3 and later)"
msgstr ""

#: ../../source/api/python_gotchas.rst:297
msgid ""
"ArcGIS allows the creation of custom, Python-based geoprocessing tools. "
"Until ArcGIS 10, there was no easy way to read raster data into memory. "
"GDAL provides such a mechanism."
msgstr ""

#: ../../source/api/python_gotchas.rst:299
msgid ""
"Starting with ArcGIS 9.3, geoprocessing tools can either run in the "
"ArcGIS process itself (ArcCatalog.exe or ArcMap.exe) or run in a separate"
" python.exe worker process. Unfortunately ArcGIS contains a bug in how it"
" runs in-process tools. Thus, if you use GDAL from an in-process tool, it"
" will run fine the first time but after that it may fail with "
"``TypeError`` exceptions until you restart the ArcGIS process. For "
"example, band.ReadAsArray() fails with:"
msgstr ""

#: ../../source/api/python_gotchas.rst:301
msgid ""
"``TypeError: in method 'BandRasterIONumpy', argument 1 of type "
"'GDALRasterBandShadow *``'"
msgstr ""

#: ../../source/api/python_gotchas.rst:303
msgid ""
"This is a bug in ArcGIS. Please see `#3672 "
"<https://trac.osgeo.org/gdal/ticket/3672>`__ for complete details and "
"advice on workarounds."
msgstr ""


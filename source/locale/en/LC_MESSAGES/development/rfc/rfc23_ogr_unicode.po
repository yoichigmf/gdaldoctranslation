# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:5
msgid "RFC 23.1: Unicode support in OGR"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:7
msgid "Authors: Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:9
msgid "Contact: warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:11
msgid "Status: Adopted (implemented)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:16
msgid ""
"This document proposes preliminary steps towards GDAL/OGR handling "
"strings internally in UTF-8, and supporting conversion between different "
"encodings."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:21
msgid "Main concepts"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:23
msgid "GDAL should be modified in a way to support three following main ideas:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:25
msgid ""
"C Functions will be provided to support a variety of encoding "
"conversions, including conversion between representations (ie. UTF-8 to "
"UCS-16/wchar_t)."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:28
msgid "Character encodings will be identified by iconv() style strings."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:29
msgid ""
"OFTString/OFTStringList feature attributes in OGR will be treated as "
"being in UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:32
msgid ""
"This RFC specifically does not attempt to address issues of using non-"
"ascii filenames. It also does not attempt to make definitions about the "
"encoding of other strings used in GDAL/OGR (such as field names, "
"metadata, etc). These would presumably be addressed in a later RFC "
"building on this one."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:39
msgid "CPLRecode API"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:41
msgid ""
"The following three C callable functions will be introduced for recoding "
"strings, and for converting between wchar_t (wide character) and char "
"(multi-byte) formats:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:57
msgid ""
"In each case the returned string is zero terminated, as is the input "
"string, and the returned string should be deallocated with CPLFree(). In "
"case of error the returned string will be NULL, and the function will "
"issue a CPLError(). The functions will be marked with CPL_DLL and "
"considered part of the public GDAL/OGR API for use of applications as "
"well as internal use."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:65
msgid "Encoding Names"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:67
msgid ""
"It is proposed that the encoding names will be the same sorts of names "
"used by iconv(). So stuff like \"UTF-8\", \"LATIN5\", \"CP850\" and "
"\"ISO_8859-1\". It does not appear that these names for encodings are a "
"1:1 match with C library locale names (like \"en_CA.utf8\" for instance) "
"which may cause some issues."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:73
msgid "Some particular names of interest:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:75
msgid ""
"\"\": The current locale. Use this when converting from/to the users "
"locale."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:77
msgid ""
"\"UTF-8\": Unicode in multi-byte encoding. Most of the time this will be "
"our internal linga-franca."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:79
msgid ""
"\"POSIX\": I think this is roughly ASCII (perhaps with some extended "
"characters?)."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:81
msgid ""
"\"UCS-2\": Two byte unicode. This is a wide character format and only "
"suitable for use with the wchar_t methods."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:84
msgid ""
"On some systems you can use \"iconv --list\" to get a list of supported "
"encodings."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:88
msgid "iconv()"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:90
msgid ""
"It is proposed to implement the CPLRecode() method using the iconv() and "
"related functions when available."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:93
msgid ""
"There is an excellent implementation of this API as GNU libiconv(), which"
" is used by the C libraries on Linux. Also some operating systems provide"
" the iconv() API as part of the C library (all unix?); however, the "
"system iconv() often has a restricted set of conversions supported so it "
"may be desirable to use libiconv in preference to the system iconv() even"
" when it is available."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:100
msgid ""
"If iconv() is not available, a stub implementation of the recode services"
" will be provided which:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:103
msgid ""
"implements UCS-2 / UTF-8 interconversion using either mbtowc/wctomb, or "
"an implementation derived from "
"`http://www.cl.cam.ac.uk/~mgk25/unicode.html "
"<http://www.cl.cam.ac.uk/~mgk25/unicode.html>`__."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:106
msgid ""
"Implements recoding from \"\" to and from \"UTF-8\" by doing nothing, but"
" issuing a warning on the first use if the current locale does not appear"
" to be the \"C\" locale."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:109
msgid "Implements recoding from \"ASCII\" to \"UTF-8\" as a null operation."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:110
msgid ""
"Implements recoding from \"UTF-8\" to \"ASCII\" by turning all non-ASCII "
"multi-byte characters to '?'."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:113
msgid ""
"This hopefully gives us a weak operational status when built without "
"iconv(), but full operation when it is available."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:116
msgid ""
"The --with-iconv= option will be added to configure. The argument can be "
"the path to a libiconv installation or the special value 'system' "
"indicating that the system lib should be used. Alternatively, --without-"
"iconv can be used to avoid using iconv."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:122
msgid "OFTString/OFTStringList Fields"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:124
msgid ""
"It is declared that OGR string attribute values will be in UTF-8. This "
"means that OGR drivers are responsible for translating format specific "
"representations to UTF-8 when reading, and back to the format specific "
"representation when writing. In many cases (of simple ASCII text) this "
"requires no transformation."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:130
msgid ""
"This implies that the arguments to methods like OGRFeature::SetField( int"
" i, const char \\*) should be UTF-8, and that GetFieldAsString() will "
"return UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:134
msgid ""
"The same issues apply to OFTStringList lists of strings. Each string will"
" be assumed to be UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:138
msgid "OLCStringsAsUTF8 Capability Flag"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:140
msgid ""
"Some drivers (ie. CSV) can effectively not know the encoding of their "
"inputs. Therefore, it isn't always practical to turn things into UTF-8 in"
" a guaranteed way. So, the new layer level capability called "
"\"StringsAsUTF8\" represented with the macro \"OLCStringsAsUTF8\" will be"
" testable at the layer level with TestCapability(). Drivers which are "
"certain to return string attributes as UTF-8 should return TRUE, while "
"drivers that do not know the encoding they return should return FALSE. "
"Any driver which knows it's encoding should convert to UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:150
msgid "OGR Driver Updates"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:152
msgid ""
"The following OGR drivers could benefit immediately from recoding to "
"UTF-8 support in one way or another."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:155
msgid "ODBC (add support for wchar_t / NVARSHAR fields)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:156
msgid "Shapefile"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:157
msgid ""
"GML (I'm not sure how the XML encoding values all map to our concept of "
"encoding)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:159
msgid "Postgres"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:161
msgid ""
"I'm sure a number of the other drivers, particularly the RDBMS drivers, "
"could benefit from an update."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:165
msgid "Implementation"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:167
msgid ""
"Frank Warmerdam will implement the core iconv() capabilities, the "
"CPLRecode() additions and update the ODBC driver. Other OGR drivers would"
" be updated as time and demand mandates to conform to the definitions in "
"this RFC by interested developers."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:172
msgid "The core work will be completed for GDAL/OGR 1.6.0 release."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:175
msgid "References"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:177
msgid ""
"`The Unicode Standard, Version 4.0 - Implementation Guidelines "
"<http://unicode.org/versions/Unicode4.0.0/ch05.pdf>`__ - Chapter 5 (PDF)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:180
msgid ""
"FAQ on how to use Unicode in software: "
"`http://www.cl.cam.ac.uk/~mgk25/unicode.html "
"<http://www.cl.cam.ac.uk/~mgk25/unicode.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:182
msgid ""
"FLTK implementation of string conversion functions: "
"`http://svn.easysw.com/public/fltk/fltk/trunk/src/utf.c "
"<http://svn.easysw.com/public/fltk/fltk/trunk/src/utf.c>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:184
msgid ""
"`http://www.easysw.com/~mike/fltk/doc-2.0/html/utf_8h.html "
"<http://www.easysw.com/~mike/fltk/doc-2.0/html/utf_8h.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:185
msgid "Ticket #1494 : UTF-8 encoding for GML output."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:186
msgid ""
"Libiconv: `http://www.gnu.org/software/libiconv/ "
"<http://www.gnu.org/software/libiconv/>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:188
msgid ""
"ICU (another i18n library): `http://www.icu-project.org/ <http://www.icu-"
"project.org/>`__"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/api/python_bindings.rst:5
msgid "General information"
msgstr ""

#: ../../source/api/python_bindings.rst:7
msgid ""
"This Python package and extensions are a number of tools for programming "
"and manipulating the GDAL_ Geospatial Data Abstraction Library."
msgstr ""

#: ../../source/api/python_bindings.rst:9
msgid ""
"The GDAL project maintains SWIG generated Python bindings for GDAL/OGR. "
"Generally speaking the classes and methods mostly match those of the GDAL"
" and OGR C++ classes. There is no Python specific reference "
"documentation, but the :ref:`tutorials <tutorials>` includes Python "
"examples."
msgstr ""

#: ../../source/api/python_bindings.rst:15
msgid "Dependencies"
msgstr ""

#: ../../source/api/python_bindings.rst:17
msgid "libgdal and header files (gdal-devel)"
msgstr ""

#: ../../source/api/python_bindings.rst:18
msgid ""
"numpy (1.0.0 or greater) and header files (numpy-devel) (not explicitly "
"required, but many examples and utilities will not work without it)"
msgstr ""

#: ../../source/api/python_bindings.rst:22
msgid "Installation"
msgstr ""

#: ../../source/api/python_bindings.rst:25
msgid "Conda"
msgstr ""

#: ../../source/api/python_bindings.rst:27
msgid ""
"GDAL can be quite complex to build and install, particularly on Windows "
"and MacOS. Pre built binaries are provided for the conda system:"
msgstr ""

#: ../../source/api/python_bindings.rst:30
msgid "https://docs.conda.io/en/latest/"
msgstr ""

#: ../../source/api/python_bindings.rst:32
msgid "By the conda-forge project:"
msgstr ""

#: ../../source/api/python_bindings.rst:34
msgid "https://conda-forge.org/"
msgstr ""

#: ../../source/api/python_bindings.rst:36
msgid ""
"Once you have Anaconda or Miniconda installed, you should be able to "
"install GDAL with:"
msgstr ""

#: ../../source/api/python_bindings.rst:38
msgid "``conda install -c conda-forge gdal``"
msgstr ""

#: ../../source/api/python_bindings.rst:41
msgid "Unix"
msgstr ""

#: ../../source/api/python_bindings.rst:43
msgid "The GDAL Python bindings requires setuptools."
msgstr ""

#: ../../source/api/python_bindings.rst:46
msgid "pip"
msgstr ""

#: ../../source/api/python_bindings.rst:48
msgid ""
"GDAL can be installed from the `Python Package Index "
"<https://pypi.org/project/GDAL>`__:"
msgstr ""

#: ../../source/api/python_bindings.rst:55
msgid ""
"In order to enable numpy-based raster support, libgdal and its "
"development headers must be installed as well as the Python packages "
"numpy, setuptools, and wheel. To install the Python dependencies and "
"build numpy-based raster support:"
msgstr ""

#: ../../source/api/python_bindings.rst:65
msgid "Users can verify that numpy-based raster support has been installed with:"
msgstr ""

#: ../../source/api/python_bindings.rst:72
msgid ""
"If this command raises an ImportError, numpy-based raster support has not"
" been properly installed:"
msgstr ""

#: ../../source/api/python_bindings.rst:83
msgid ""
"This is most often due to pip reusing a cached GDAL installation. Verify "
"that the necessary dependencies have been installed and then run the "
"following to force a clean build:"
msgstr ""

#: ../../source/api/python_bindings.rst:88
msgid "::"
msgstr ""

#: ../../source/api/python_bindings.rst:87
msgid ""
"pip install --no-cache --force-reinstall gdal[numpy]==\"$(gdal-config "
"--version).*\""
msgstr ""

#: ../../source/api/python_bindings.rst:91
msgid "Potential issues with GDAL >= 3.9, Python >= 3.9 and NumPy 2.0"
msgstr ""

#: ../../source/api/python_bindings.rst:93
msgid ""
"The pyproject.toml file of GDAL 3.9 requires numpy >= 2.0.0rc1 (for "
"Python >= 3.9) at build time to be able to build bindings that are "
"compatible of both NumPy 1 and NumPy 2. If for some reason the numpy >= "
"2.0.0rc1 build dependency can not be installed, it is possible to "
"manually install the build requirements, and invoke ``pip install`` with "
"the ``--no-build-isolation`` flag."
msgstr ""

#: ../../source/api/python_bindings.rst:107
msgid "Building as part of the GDAL library source tree"
msgstr ""

#: ../../source/api/python_bindings.rst:109
msgid ""
"Python bindings are generated by default when building GDAL from source. "
"For more detail, see :ref:`building-python-bindings`."
msgstr ""

#: ../../source/api/python_bindings.rst:112
msgid ""
"The GDAL Python package is built using `SWIG <https://www.swig.org>`__. "
"The currently supported version is SWIG >= 4"
msgstr ""

#: ../../source/api/python_bindings.rst:116
msgid "Usage"
msgstr ""

#: ../../source/api/python_bindings.rst:119
msgid "Imports"
msgstr ""

#: ../../source/api/python_bindings.rst:121
msgid ""
"There are five major modules that are included with the GDAL_ Python "
"bindings.:"
msgstr ""

#: ../../source/api/python_bindings.rst:132
msgid "API"
msgstr ""

#: ../../source/api/python_bindings.rst:134
msgid "API documentation is available at :ref:`python_osgeo`"
msgstr ""

#: ../../source/api/python_bindings.rst:137
msgid "Numpy"
msgstr ""

#: ../../source/api/python_bindings.rst:139
msgid ""
"One advanced feature of the GDAL Python bindings not found in the other "
"language bindings is integration with the Python numerical array "
"facilities. The gdal.Dataset.ReadAsArray() method can be used to read "
"raster data as numerical arrays, ready to use with the Python numerical "
"array capabilities."
msgstr ""

#: ../../source/api/python_bindings.rst:146
msgid "Tutorials"
msgstr ""

#: ../../source/api/python_bindings.rst:148
msgid ""
"Chris Garrard has given courses at Utah State University on "
"\"Geoprocessing with Python using Open Source GIS\" "
"(`http://www.gis.usu.edu/~chrisg/python "
"<http://www.gis.usu.edu/~chrisg/python>`__). There a re many slides, "
"examples, test data... and homework ;-) that can -be greatly helpful for "
"beginners with GDAL/OGR in Python."
msgstr ""

#: ../../source/api/python_bindings.rst:152
msgid ""
"A cookbook full of recipes for using the Python GDAL/OGR bindings : "
"`http://pcjericks.github.io/py-gdalogr-cookbook/index.html "
"<http://pcjericks.github.io/py-gdalogr-cookbook/index.html>`__"
msgstr ""

#: ../../source/api/python_bindings.rst:155
msgid "Gotchas"
msgstr ""

#: ../../source/api/python_bindings.rst:157
msgid ""
"Although GDAL's and OGR's Python bindings provide a fairly \"Pythonic\" "
"wrapper around the underlying C++ code, there are several ways in which "
"the Python bindings differ from typical Python libraries. These "
"differences can catch Python programmers by surprise and lead to "
"unexpected results. These differences result from the complexity of "
"developing a large, long-lived library while continuing to maintain "
"backward compatibility. They are being addressed over time, but until "
"they are all gone, please review this list of :ref:`python_gotchas`."
msgstr ""

#: ../../source/api/python_bindings.rst:162
msgid "Examples"
msgstr ""

#: ../../source/api/python_bindings.rst:164
msgid ""
"An assortment of other samples are available in the `Python github "
"samples directory <https://github.com/OSGeo/gdal/tree/master/swig/python"
"/gdal-utils/osgeo_utils/samples>`__ with some description in the "
":ref:`python_samples`."
msgstr ""

#: ../../source/api/python_bindings.rst:166
msgid ""
"Several `GDAL utilities "
"<https://github.com/OSGeo/gdal/tree/master/swig/python/gdal-"
"utils/osgeo_utils/>`__ are implemented in Python and can be useful "
"examples."
msgstr ""

#: ../../source/api/python_bindings.rst:168
msgid ""
"The majority of GDAL regression tests are written in Python. They are "
"available at `https://github.com/OSGeo/gdal/tree/master/autotest "
"<https://github.com/OSGeo/gdal/tree/master/autotest>`__"
msgstr ""

#: ../../source/api/python_bindings.rst:170
msgid ""
"Some examples of GDAL/numpy integration can be found is found in the "
"following scripts:"
msgstr ""

#: ../../source/api/python_bindings.rst:172
msgid "`gdal_calc.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:173
msgid "`val_repl.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:174
msgid "`gdal_merge.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:175
msgid "`gdal2tiles.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:176
msgid "`gdal2xyz.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:177
msgid "`pct2rgb.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:178
msgid "`gdallocationinfo.py`"
msgstr ""

#: ../../source/api/python_bindings.rst:180
msgid ""
"One example of GDAL/numpy integration is found in the `val_repl.py "
"<https://github.com/OSGeo/gdal/tree/master/swig/python/gdal-"
"utils/osgeo_utils/samples/val_repl.py>`__ script."
msgstr ""

#: ../../source/api/python_bindings.rst:183
msgid "**Performance Notes**"
msgstr ""

#: ../../source/api/python_bindings.rst:185
msgid ""
"ReadAsArray expects to make an entire copy of a raster band or dataset "
"unless the data are explicitly subsetted as part of the function call. "
"For large data, this approach is expected to be prohibitively memory "
"intensive."
msgstr ""


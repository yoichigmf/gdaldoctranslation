# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:5
msgid "RFC 30: Unicode Filenames"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:7
msgid "Authors: Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:9
msgid "Contact: warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:11
msgid "Status: Adopted"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:16
msgid ""
"This document describes steps to generally handle filenames as UTF-8 "
"strings in GDAL/OGR. In brief it will be assumed that filenames passed "
"into and returned by GDAL/OGR interfaces are UTF-8. On some operating "
"systems, notably Windows, this will require use of \"wide character\" "
"interfaces in the low level VSI*L API."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:23
msgid "Key Interfaces"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:26
msgid "VSI*L API"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:28
msgid ""
"All filenames in the VSI*L API will be treated as UTF-8, which means the "
"cpl_vsil_win32.cpp implementation will need substantial updates to use "
"wide character interfaces."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:32
msgid "VSIFOpenL()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:33
msgid "VSIFStatL()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:34
msgid "VSIReadDir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:35
msgid "VSIMkdir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:36
msgid "VSIRmdir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:37
msgid "VSIUnlink()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:38
msgid "VSIRename()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:41
msgid "Old (small file) VSI API"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:43
msgid ""
"The old VSIFOpen() function will be adapted to use \\_wfopen() on windows"
" instead of fopen() so that utf-8 filenames will be supported."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:46
msgid "VSIFOpen()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:47
msgid "VSIStat()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:50
msgid "Filename Parsing"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:52
msgid ""
"Because the path/extension delimiter characters '.', '', '/' and ':' will"
" never appear in the non-ascii portion of utf-8 strings we can safely "
"leave the existing path parsing functions working as they do now. They do"
" not need to be aware of the real character boundaries for exotic "
"characters in utf-8 paths. The following will be left unchanged."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:58
msgid "CPLGetPath()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:59
msgid "CPLGetDirname()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:60
msgid "CPLGetFilename()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:61
msgid "CPLGetBasename()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:62
msgid "CPLGetExtension()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:63
msgid "CPLResetExtension()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:66
msgid "Other"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:68
msgid "CPLStat()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:69
msgid "CPLGetCurrentDir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:70
msgid "GDALDataset::GetFileList()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:72
msgid "These will all also need to treat filenames as utf-8."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:75
msgid "Windows"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:77
msgid ""
"Currently Windows's cpl_vsil_win32.cpp module uses CreateFile() with "
"ascii filenames. It needs to be converted to use CreateFileW() and other "
"wide character functions for stat(), rename, mkdir, etc. Prototype "
"implementation already developed (r20620)."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:85
msgid "Linux / Unix / MacOS X"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:87
msgid ""
"On modern linux, unix and MacOS operating systems the fopen(), stat(), "
"readdir() functions already support UTF-8 strings. It is not currently "
"anticipated that any work will be needed on Linux/Unix/MacOS X though "
"there is some question about this. It is considered permissible under the"
" definition of this RFC for old, and substandard operating systems "
"(WinCE?) to support only ASCII, not UTF-8 filenames."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:95
msgid "Metadata"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:97
msgid ""
"There are a variety of places where general text may contain filenames. "
"One obvious case is the subdataset filenames returned from the SUBDATASET"
" domain. Previously these were just exposed as plain text and "
"interpretation of the character set was undefined. As part of this RFC we"
" state that such filenames should be considered to be in utf-8 format."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:104
msgid "Python Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:106
msgid ""
"I observe with Python 2.6 that functions like gdal.Open() do not accept "
"unicode strings, but they do accept utf-8 string objects. One possible "
"solution is to update the bindings in selective places to identify "
"unicode strings passed in, and transform them to utf-8 strings."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:111
msgid "eg."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:119
msgid ""
"I'm not sure what the easiest way is to accomplish this in the bindings. "
"The key entries are:"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:122
msgid "gdal.Open()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:123
msgid "ogr.Open()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:124
msgid "gdal.ReadDir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:125
msgid "gdal.PushFinderLocation()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:126
msgid "gdal.FindFile()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:127
msgid "gdal.Unlink()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:129
msgid ""
"Similarly all interfaces (ie. gdal.ReadDir()) that return filenames will "
"hereafter return unicode objects rather than string objects."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:132
msgid "Also note that in Python 3.x strings are always unicode."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:135
msgid "C# Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:137
msgid ""
"Tamas notes that in C# we normally convert the unicode C# strings into C "
"string with the PtrToStringAnsi marshaller. Presumably we will need to "
"use a utf-8 converter for all interface strings considered to be "
"filenames. I would note this should also apploy to OGR string attribute "
"values which are also intended to be treated as utf-8."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:143
msgid ""
"(It is unclear who will take care of this aspect since the primary author"
" (FrankW) is not C#-binding-competent."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:147
msgid "Perl Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:149
msgid ""
"The general rule in Perl is that all strings should be decoded before "
"giving them to Perl and encoded when they are output. In practice things "
"usually just work. To be sure, I (Ari) have added an explicit decode from"
" utf8 to FindFile and ReadDir (#20800)."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:155
msgid "Java Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:157
msgid ""
"No changes are needed for Java. Java strings are unicode, and they are "
"already converted to utf-8 in the java swig bindings. That is, the java "
"bindings already assumed passing and receiving utf-8 strings to/from "
"GDAL/OGR."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:163
msgid "Commandline Issues"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:165
msgid ""
"On windows argv[] as passed into main() will not generally be able to "
"represent exotic filenames that can't be represented in the locale "
"charset. It is possible to fetch the commandline and parse it as wide "
"characters using GetCommandLineW() and CommandLinetoArgvW() to capture "
"ucs-16 filenames (easily converted to utf-8); however, this interferes "
"with the use of setargv.obj to expand wildcards on windows."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:172
msgid ""
"I have not been able to come up with a good solution, so for now I am not"
" intending to make any changes to the GDAL/OGR commandline utilities to "
"allow passing exotic filenames. So this RFC is mainly aimed at ensuring "
"that other applications using GDAL/OGR can utilize exotic filenames."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:179
msgid "File Formats"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:181
msgid ""
"The proposed implementation really only addresses file format drivers "
"that use VSIFOpenL(), VSIFOpen() and related functions. Some drivers "
"dependent on external libraries (ie. netcdf) do not have a way to hook "
"the file IO API and may not support utf-8 filenames. It might be nice to "
"be able to distinguish these."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:187
msgid ""
"At the very least any driver marked with GDAL_DCAP_VIRTUALIO as \"YES\" "
"will support UTF-8. Perhaps this opportunity ought to be used to more "
"uniformly apply this driver metadata (done)."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:192
msgid "Test Suite"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:194
msgid ""
"We will need to introduce some test suite tests with multibyte utf-8 "
"filenames. In support of that aspects of the VSI*L API - particularly the"
" rename, mkdir, rmdir, functions and VSIFOpenL itself have been exposed "
"in python."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:200
msgid "Documentation"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:202
msgid ""
"Appropriate API entry points will be documented as taking and return "
"UTF-8 strings."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:206
msgid "Implementation"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:208
msgid "Implementation is underway and being tracked in ticket #3766."
msgstr ""


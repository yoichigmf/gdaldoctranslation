# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:5
msgid "RFC 92: WKB Only geometries (on hold)"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:8
msgid "Author:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:8
msgid "Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:9
msgid "Contact:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:9
msgid "even.rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:10
msgid "Started:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:10
msgid "2023-Jan-31"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:11
msgid "Status:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:11
msgid "On hold"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:12
msgid "Target:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:12
msgid "N/A"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:16
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:18
msgid ""
"This RFC provides shortcuts to avoid instantiation of full OGRGeometry "
"instances in scenarios where only the WKB representation of geometries is"
" needed. The hope is to save CPU time."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:22
msgid "This RFC is on hold."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:25
msgid "Motivation"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:27
msgid ""
"Some consumers of the OGR feature API only use the WKB representation of "
"the geometry. This is typically the case in the QGIS OGR provider (a QGIS"
" \"provider\" ~= a GDAL driver) which creates the corresponding "
"QgsGeometry instance from WKB."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:32
msgid ""
"The format of geometries of some popular formats like GeoPackage or "
"PostGIS is based on WKB. Consequently the chain of processings done by "
"QGIS reading GeoPackage is:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:36
msgid "GDAL side:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:38
msgid ""
"acquire GeoPackage geometry blob (WKB with a GeoPackage specific header) "
"from the database"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:40
msgid ""
"instantiate the relevant OGRGeometry subclass instance (OGRPoint, "
"OGRLineString, OGRPolygon, etc.) from WKB"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:42
msgid "store it in a OGRFeature"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:44
msgid "QGIS side:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:46
msgid "get the OGRGeometry from the OGRFeature"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:47
msgid ""
"asks for its WKB representation, build from the subclass members (not the"
" original WKB of step 2.)"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:49
msgid "instantiate QgsGeometry from WKB"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:51
msgid ""
"One can see that if we were able to store the original WKB representation"
" and get it back we could save OGRGeometry subclass object creation, "
"destruction and WKB deserialization and serialization."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:55
msgid ""
":ref:`rfc-86` has seen related performance boosts since ArrowArray "
"batches store the WKB representation of geometries and not OGRGeometry "
"instances. This RFC borrows the same idea, but applying it to the "
"traditional feature API, as switching to ArrowArray API is a significant "
"undertaking for GDAL users."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:60
msgid ""
"That could also be used in the future for a generic implementation of a "
"potential OGRLayer::WriteArrowArray() method that would build temporary "
"OGRFeature objects from the rows of the array to call the "
"ICreateFeature() implementation: the temporary geometries could be "
"OGRWKBOnlyGeometry instances for drivers such as GeoPackage that use WKB "
"natively."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:67
msgid "Technical details"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:69
msgid ""
"The proposal mostly contains in adding a new subclass of OGRGeometry "
"called `OGRWKBOnlyGeometry`"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:111
msgid "A new method is added to the OGRLayer class:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:122
msgid "Two new capabilities are added at the OGRLayer level:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:124
msgid ""
"OLCReadWKBGeometries: a layer must return TRUE for it when the layer can "
"honour RequestWKBOnlyGeometries(true)"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:126
msgid ""
"OLCWriteWKBGeometries: a layer must return TRUE for it if its "
"CreateFeature() and SetFeature() implementations support being passed "
"OGRWKBOnlyGeometry instances."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:130
msgid ""
"ogr2ogr is modified to call RequestWKBOnlyGeometries(true) on the source "
"layer:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:132
msgid "if the source layer advertises OLCReadWKBGeometries"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:133
msgid "if the target layer advertises OLCWriteWKBGeometries"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:134
msgid "if no command line switch requires a \"materialized\" geometry."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:136
msgid ""
"So basically this is for requests like \"ogr2ogr out.gpkg in.gpkg [layer "
"or SQL request] [attribute filter] [spatial filter]\""
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:139
msgid ""
"To be noted that while bounding box intersection in the case of "
"GeoPackage is done at the SQLite RTree level, the GeoPackage driver "
"currently does a \"client-side\" post filtering using GEOSIntersects() "
"(in situations where bounding box analysis only cannot conclude), so "
"geometry materialization is done in OGRLayer::FilterGeometry() for a "
"subset of features."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:146
msgid "C API"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:148
msgid "OGR_L_RequestWKBOnlyGeometries() is added."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:151
msgid "Backward compatibility"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:153
msgid "No issue. Only API additions"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:156
msgid "Benchmarking"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:159
msgid "bench_ogr_c_api"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:161
msgid ""
"The `bench_ogr_c_api "
"<https://github.com/OSGeo/gdal/blob/master/perftests/bench_ogr_c_api.cpp>`_"
" benchmark utility which uses the C API to iterate over features and get "
"their WKB representation is enhanced with a `-wkb_only_geometry` switch "
"to call OGR_L_RequestWKBOnlyGeometries()."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:166
msgid ""
"On a 1.6 GB GeoPackage (nz-building-outlines.gpkg) made of 3.2 million "
"features with simple polygons (typically quadrilaterals, building "
"footprints) and 13 attributes:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:170
msgid "bench_ogr_c_api runs in 6.4 s"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:171
msgid "bench_ogr_c_api -wkb_only_geometry runs in 5.0 s"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:173
#, python-format
msgid "==> 22% faster"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:175
#, python-format
msgid ""
"Other synthetic benchmarks show that the maximum speed-up is about 30% on"
" a dataset with 10 millions polygonal features of 10 points each."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:178
msgid ""
"Conversely, the gain is much more modest, or close to null, with just a "
"few thousands of features that hold larger geometries (several thousands "
"of points each)."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:182
msgid ""
"The gain is more in saving instantiation of OGRPolygon and OGRLinearRing "
"objects that in the size of their coordinate set."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:186
msgid "ogr2ogr"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:193
#, python-format
msgid ""
"runs in 15.8 second in WKBOnlyGeometry mode vs 19.1 second without it "
"(master), hence a 17% speed-up."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:196
#, python-format
msgid ""
"With spatial index creation enabled (multi-threaded), the wall clock time"
" difference is within measurement noise. And for singe threaded creation,"
" the WKBOnlyGeometry mode is 5% faster."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:201
msgid "Discussion"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:203
msgid "Is it a good idea... ?"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:205
msgid ""
"The design of OGRWKBOnlyGeometry is admittedly a bit clunky, or at least "
"at odds with other OGRGeometry subclasses, but nothing more elegant, "
"concise, performant and that doesn't change the whole OGRGeometry API and"
" driver implementations comes to mind."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:210
msgid ""
"The scope is limited to a few drivers: GeoPackage, PostGIS (but the "
"current throughput of the driver is probably not sufficient for "
"OGRGeometry overhead to be noticeable), what else?"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:214
msgid ""
"Should methods of OGRWKBOnlyGeometry that cannot work without "
"materialization of the real geometry return an error like done currently,"
" or do the materialization on-the-fly when needed ? The motivation for "
"erroring out is to avoid silent performance issues related to "
"materialization."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:220
msgid "Points raised during discussion"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:222
msgid ""
"Sean Gillies: Wouldn't it be possible for all OGRFeatures to carry WKB "
"data by default and add a method to provide it to callers?"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:225
msgid ""
"Even: That involve massive code rewrites in all drivers and wouldn't be "
"desirable from a performance point of view, because most drivers can't "
"generate WKB easily (PostGIS and GPKG are the exceptions rather the "
"norm). So either all other drivers should be modified to compose WKB at "
"hand (massive coding effort. Probably several weeks of effort and "
"significant risk of regressions). Or get it from the ExportToWkb() method"
" of the OGRGeometry instance they currently build, but then you pay the "
"price in memory and CPU time to generate WKB that might not be consumed "
"by users."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:234
msgid ""
"Sean Gillies: And only construct an OGRGeometry when it's asked for? Such"
" as when GetGeometryRef is called?"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:237
msgid ""
"Even: we could both make GetGeometryRef() and GetGeomFieldRef() virtual "
"methods whose default implementation would be the same as currently, ie. "
"return the value of the corresponding member variable in the base "
"OGRFeature class stored with "
"SetGeometry[Directly]()/SetGeomField[Directly]()"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:242
msgid "And add a new virtual method:"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:244
msgid ""
"virtual GByte* OGRFeature::GetWKBGeometry(int iGeomField, size_t* "
"pnOutSize) const"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:246
msgid ""
"whose default implementation would just use "
"GetGeomFieldRef(iGeomField)->ExportToWkb()."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:248
msgid ""
"The few drivers that can provide a more efficient implementation (GPKG "
"typically) would create a derived class OGRFeatureGPKG with a specific "
"implementation of those new virtual methods to avoid systematic "
"OGRGeometry instantiation. The only drawback I see is that making "
"GetGeometryRef() and GetGeomFieldRef() virtual would have a slight "
"performance impact, but probably small enough."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:254
msgid ""
"Dan Baston: I'm wondering about a more broad application of this. Would "
"it be helpful to have the ability to lazy-initialize an OGRGeometry from "
"multiple source types such as WKB and GEOS, initially storing only a "
"reference to the external data in WKB/GEOS/etc and actually materializing"
" the geometry when required? Then methods such as "
"OGRGeometry::exportToWkb and OGRGeometry::exportToGEOS could check the "
"external data type and use it directly if it is compatible, avoiding "
"materialization. This would avoid multiple conversions to/from GEOS in "
"cases where operations are chained, as well as allowing WKB to pass "
"directly between input and output drivers that support it. Relatedly, "
"this ability could be used to cache external-format data when it is "
"generated for an OGRGeometry, avoiding inefficiencies such as two "
"conversions to GEOS when checking to see if two geometries intersect "
"before calculating their intersection."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:268
msgid ""
"Even: That's definitely something doable. At a minimum, you would have to"
" inspect the top geometry type to instantiate the appropriate OGRGeometry"
" subclass, and then its members could be lazy initialized, but that means"
" that all methods of OGRGeometry and its subclasses would have to do a "
"check whether the object has been fully initialized. There might be "
"performance implications for people doing for example "
"lineString->getX(idx) to iterate on big geometries, although branch "
"predictors of modern CPUs are probably very good at repeatedly evaluating"
" stuff like \"if (!materialized) materialize();\". The main drawback is "
"that is a substantial & risky change that requires to revisit *all* "
"methods of the geometry classes. For setters, you would also have to make"
" sure to invalidate the potentially initial WKB / GEOS source."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:281
msgid "Issues / pull requests"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:283
msgid ""
"https://github.com/OSGeo/gdal/compare/master...rouault:gdal:rfc92_implementation?expand=1"
" contains a preliminary candidate implementation."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:286
msgid ""
"Not all subtleties have been taken into account in the prototype "
"implementation (like doing OGRSQL and requesting the OGR_GEOMETRY special"
" attribute)."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:289
msgid ""
"OGRLayer::FilterGeometry() (used for spatial filter evaluation by "
"GetNextFeature()) uses OGRWKBOnlyGeometry::Materialize() for convenience "
"currently. This could be improved for geometry types that are directly "
"compatible of GEOS to pass directly the WKB to GEOS."
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:295
msgid "Voting history"
msgstr ""

#: ../../source/development/rfc/rfc92_wkb_only_geometries.rst:297
msgid "TBD"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/tutorials/raster_api_tut.rst:5
msgid "Raster API tutorial"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:8
msgid "Opening the File"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:10
msgid ""
"Before opening a GDAL supported raster datastore it is necessary to "
"register drivers. There is a driver for each supported format. Normally "
"this is accomplished with the :cpp:func:`GDALAllRegister` function which "
"attempts to register all known drivers, including those auto-loaded from "
".so files using :cpp:func:`GDALDriverManager::AutoLoadDrivers`. If for "
"some applications it is necessary to limit the set of drivers it may be "
"helpful to review the code from gdalallregister.cpp. Python automatically"
" calls GDALAllRegister() when the gdal module is imported."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:12
msgid ""
"Once the drivers are registered, the application should call the free "
"standing :cpp:func:`GDALOpen` function to open a dataset, passing the "
"name of the dataset and the access desired (GA_ReadOnly or GA_Update)."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:14
#: ../../source/tutorials/raster_api_tut.rst:98
#: ../../source/tutorials/raster_api_tut.rst:163
#: ../../source/tutorials/raster_api_tut.rst:241
#: ../../source/tutorials/raster_api_tut.rst:314
#: ../../source/tutorials/raster_api_tut.rst:369
#: ../../source/tutorials/raster_api_tut.rst:410
#: ../../source/tutorials/raster_api_tut.rst:458
#: ../../source/tutorials/raster_api_tut.rst:485
msgid "In C++:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:40
#: ../../source/tutorials/raster_api_tut.rst:119
#: ../../source/tutorials/raster_api_tut.rst:190
#: ../../source/tutorials/raster_api_tut.rst:254
#: ../../source/tutorials/raster_api_tut.rst:332
#: ../../source/tutorials/raster_api_tut.rst:383
#: ../../source/tutorials/raster_api_tut.rst:426
#: ../../source/tutorials/raster_api_tut.rst:467
#: ../../source/tutorials/raster_api_tut.rst:506
msgid "In C:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:67
#: ../../source/tutorials/raster_api_tut.rst:143
#: ../../source/tutorials/raster_api_tut.rst:217
#: ../../source/tutorials/raster_api_tut.rst:267
#: ../../source/tutorials/raster_api_tut.rst:349
#: ../../source/tutorials/raster_api_tut.rst:396
#: ../../source/tutorials/raster_api_tut.rst:442
#: ../../source/tutorials/raster_api_tut.rst:476
#: ../../source/tutorials/raster_api_tut.rst:529
msgid "In Python:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:76
msgid ""
"Note that if :cpp:func:`GDALOpen` returns NULL it means the open failed, "
"and that an error messages will already have been emitted via "
":cpp:func:`CPLError`. If you want to control how errors are reported to "
"the user review the :cpp:func:`CPLError` documentation. Generally "
"speaking all of GDAL uses :cpp:func:`CPLError` for error reporting. Also,"
" note that pszFilename need not actually be the name of a physical file "
"(though it usually is). It's interpretation is driver dependent, and it "
"might be an URL, a filename with additional parameters added at the end "
"controlling the open or almost anything. Please try not to limit GDAL "
"file selection dialogs to only selecting physical files."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:79
msgid "Getting Dataset Information"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:81
msgid ""
"As described in the :ref:`raster_data_model`, a :cpp:class:`GDALDataset` "
"contains a list of raster bands, all pertaining to the same area, and "
"having the same resolution. It also has metadata, a coordinate system, a "
"georeferencing transform, size of raster and various other information."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:83
msgid ""
"In the particular, but common, case of a \"north up\" image without any "
"rotation or shearing, the georeferencing transform "
":ref:`geotransforms_tut` takes the following form :"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:94
msgid "In the general case, this is an affine transform."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:96
msgid ""
"If we wanted to print some general information about the dataset we might"
" do the following:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:159
msgid "Fetching a Raster Band"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:161
msgid ""
"At this time access to raster data via GDAL is done one band at a time. "
"Also, there is metadata, block sizes, color tables, and various other "
"information available on a band by band basis. The following codes "
"fetches a :cpp:class:`GDALRasterBand` object from the dataset (numbered 1"
" through :cpp:func:`GDALRasterBand::GetRasterCount`) and displays a "
"little information about it."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:237
msgid "Reading Raster Data"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:239
msgid ""
"There are a few ways to read raster data, but the most common is via the "
":cpp:func:`GDALRasterBand::RasterIO` method. This method will "
"automatically take care of data type conversion, up/down sampling and "
"windowing. The following code will read the first scanline of data into a"
" similarly sized buffer, converting it to floating point as part of the "
"operation."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:252
#: ../../source/tutorials/raster_api_tut.rst:265
msgid ""
"The pafScanline buffer should be freed with CPLFree() when it is no "
"longer used."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:276
msgid ""
"Note that the returned scanline is of type string, and contains xsize*4 "
"bytes of raw binary floating point data. This can be converted to Python "
"values using the struct module from the standard library:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:283
msgid "The RasterIO call takes the following arguments."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:294
msgid ""
"Note that the same RasterIO() call is used to read, or write based on the"
" setting of eRWFlag (either GF_Read or GF_Write). The nXOff, nYOff, "
"nXSize, nYSize argument describe the window of raster data on disk to "
"read (or write). It doesn't have to fall on tile boundaries though access"
" may be more efficient if it does."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:296
msgid ""
"The pData is the memory buffer the data is read into, or written from. "
"It's real type must be whatever is passed as eBufType, such as "
"GDT_Float32, or GDT_Byte. The RasterIO() call will take care of "
"converting between the buffer's data type and the data type of the band. "
"Note that when converting floating point data to integer RasterIO() "
"rounds down, and when converting source values outside the legal range of"
" the output the nearest legal value is used. This implies, for instance, "
"that 16bit data read into a GDT_Byte buffer will map all values greater "
"than 255 to 255, the data is not scaled!"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:298
msgid ""
"The nBufXSize and nBufYSize values describe the size of the buffer. When "
"loading data at full resolution this would be the same as the window "
"size. However, to load a reduced resolution overview this could be set to"
" smaller than the window on disk. In this case the RasterIO() will "
"utilize overviews to do the IO more efficiently if the overviews are "
"suitable."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:300
msgid ""
"The nPixelSpace, and nLineSpace are normally zero indicating that default"
" values should be used. However, they can be used to control access to "
"the memory data buffer, allowing reading into a buffer containing other "
"pixel interleaved data for instance."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:303
msgid "Closing the Dataset"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:305
msgid ""
"Please keep in mind that :cpp:class:`GDALRasterBand` objects are owned by"
" their dataset, and they should never be destroyed with the C++ delete "
"operator. :cpp:class:`GDALDataset`'s can be closed by calling "
":cpp:func:`GDALClose` (it is NOT recommended to use the delete operator "
"on a GDALDataset for Windows users because of known issues when "
"allocating and freeing memory across module boundaries. See the relevant "
"topic on the FAQ). Calling GDALClose will result in proper cleanup, and "
"flushing of any pending writes. Forgetting to call GDALClose on a dataset"
" opened in update mode in a popular format like GTiff will likely result "
"in being unable to open it afterwards."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:308
msgid "Techniques for Creating Files"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:310
msgid ""
"New files in GDAL supported formats may be created if the format driver "
"supports creation. There are two general techniques for creating files, "
"using CreateCopy() and Create(). The CreateCopy method involves calling "
"the CreateCopy() method on the format driver, and passing in a source "
"dataset that should be copied. The Create method involves calling the "
"Create() method on the driver, and then explicitly writing all the "
"metadata, and raster data with separate calls. All drivers that support "
"creating new files support the CreateCopy() method, but only a few "
"support the Create() method."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:312
msgid ""
"To determine if a particular format supports Create or CreateCopy it is "
"possible to check the DCAP_CREATE and DCAP_CREATECOPY metadata on the "
"format driver object. Ensure that :cpp:func:`GDALAllRegister` has been "
"called before calling :cpp:func:`GDALDriverManager::GetDriverByName`. In "
"this example we fetch a driver, and determine whether it supports "
"Create() and/or CreateCopy()."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:362
msgid ""
"Note that a number of drivers are read-only and won't support Create() or"
" CreateCopy()."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:365
msgid "Using CreateCopy()"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:367
msgid ""
"The :cpp:func:`GDALDriver::CreateCopy` method can be used fairly simply "
"as most information is collected from the source dataset. However, it "
"includes options for passing format specific creation options, and for "
"reporting progress to the user as a long dataset copy takes place. A "
"simple copy from the a file named pszSrcFilename, to a new file named "
"pszDstFilename using default options on a format whose driver was "
"previously fetched might look like this:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:406
msgid ""
"Note that the CreateCopy() method returns a writable dataset, and that it"
" must be closed properly to complete writing and flushing the dataset to "
"disk. In the Python case this occurs automatically when \"dst_ds\" goes "
"out of scope. The FALSE (or 0) value used for the bStrict option just "
"after the destination filename in the CreateCopy() call indicates that "
"the CreateCopy() call should proceed without a fatal error even if the "
"destination dataset cannot be created to exactly match the input dataset."
" This might be because the output format does not support the pixel "
"datatype of the input dataset, or because the destination cannot support "
"writing georeferencing for instance."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:408
msgid ""
"A more complex case might involve passing creation options, and using a "
"predefined progress monitor like this:"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:454
msgid "Using Create()"
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:456
msgid ""
"For situations in which you are not just exporting an existing file to a "
"new file, it is generally necessary to use the "
":cpp:func:`GDALDriver::Create` method (though some interesting options "
"are possible through use of virtual files or in-memory files). The "
"Create() method takes an options list much like CreateCopy(), but the "
"image size, number of bands and band type must be provided explicitly."
msgstr ""

#: ../../source/tutorials/raster_api_tut.rst:483
msgid ""
"Once the dataset is successfully created, all appropriate metadata and "
"raster data must be written to the file. What this is will vary according"
" to usage, but a simple case with a projection, geotransform and raster "
"data is covered here."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-23 04:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/rfc/rfc49_curve_geometries.rst:5
msgid "RFC 49: Curve geometries"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:7
msgid "Author: Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:9
msgid "Contact: even dot rouault at spatialys dot com"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:11
msgid "Status: Adopted, implemented in GDAL 2.0"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:14
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:16
msgid ""
"The current geometry model in GDAL 1.X makes use of points, lines, "
"polygons and aggregations of them (multipoints, multilines, multipolygons"
" and geometry collections). It was modeled from the geometry class "
"hierarchy of the \"OpenGIS Simple Feature Access Part 1 : Common "
"Architecture\" (in its 1.1.0 version)."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:22
msgid ""
"This RFC covers the addition of new geometry types that have been added "
"in ISO/IEC 13249 Part 3 Spatial (abbreviated as ISO SQL/MM Part 3):"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:25
msgid ""
"circular string: a circular arc, or a sequence of connected circular "
"arcs, each of them describe by 3 points: the first point of the arc, an "
"intermediate point and the final point"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:28
msgid ""
"compound curve: a sequence of connected curves, either line strings or "
"circular strings"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:30
msgid ""
"curve polygon: polygon consisting of one outer ring, and zero or more "
"inner ring. Each ring can be one of the curve implementations: line "
"strings, circular strings, compound curves."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:33
msgid ""
"multicurve: a collection of curves (line strings, circular strings, "
"compound curves)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:35
msgid "multisurface: a collection of surfaces (polygons, curve polygons)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:37
msgid "The scope of this RFC consists in :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:39
msgid ""
"adding the new geometry classes to the existing geometry class hierarchy,"
" with the corresponding importer and exporter of WKT (Well Known Text) "
"and WKB (Well Known Binary) encodings"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:42
msgid ""
"adding methods to convert those curve geometries into their approximated "
"linear version, and to do the reverse operation"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:44
msgid ""
"upgrading some of the drivers that can support such geometries : GML (and"
" indirectly NAS, WFS), PostGIS/PGDump, GeoPackage, SQLite, CSV, VRT."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:49
msgid "Reference documents"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:51
msgid "The following documents have been used for the implementation :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:53
msgid ""
"`Old draft version of ISO/IEC 13249 Part 3 Spatial, dating from "
"2004-05-09 <http://jtc1sc32.org/doc/N1101-1150/32N1107-WD13249-3--"
"spatial.pdf>`__, a.k.a SQL/MM Part 3 : Caution the WKB codes given at "
"page 137 and following are not the latest ones used. Refer to SFA 1.2.1"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:58
msgid ""
"`OpenGIS Simple Feature Access Part 1 : Common Architecture,v 1.2.1 "
"<http://portal.opengeospatial.org/files/?artifact_id=25355>`__, a.k.a. "
"SFA 1.2.1"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:62
msgid ""
"`BNF of WKT encoding <https://github.com/postgis/postgis/blob/svn-"
"trunk/doc/bnf-wkt.txt>`__: extracted from SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:66
msgid ""
"`BNF of WKB encoding <https://github.com/postgis/postgis/blob/svn-"
"trunk/doc/bnf-wkb.txt>`__: extracted from SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:71
msgid "Core changes"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:74
msgid "New cass hierarchy"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:76
msgid ""
"The new class hierarchy is the following and is mostly consistent with "
"SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:81
msgid "The only exceptions are :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:83
msgid ""
"OGRLinearRing: this class present in GDAL 1.X is kept for backward "
"compatibility and also because it is still present in SFA 1.2.1, even if "
"absent from SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:86
msgid ""
"OGRSimpleCurve: this abstract class is an implementation detail in OGR "
"that simplifies the implementation of OGRCircularString, by sharing code "
"with what was in OGRLineString only."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:91
msgid "Geometry types"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:93
msgid ""
"The OGRwkbGeometryType enumeration has been extended with the following "
"values :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:113
msgid ""
"The codes have been taken from SFA 1.2.1, and are consistent with the "
"PostGIS 2 implementation. Note that ISO SQL/MM Part 3 allows alternates "
"values for wkbCircularString (8 or 1000001) : see Table 15 in the above "
"mentioned draft. The values in the range 10000XX probably date back from "
"an earlier draft version. OGR will import them, but will use the values "
"from SFA 1.2.1 when exporting WKB."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:120
msgid ""
"It has been considered if it would worth to modify the enumeration values"
" of the existing 2.5D geometries (wkbPoint25D, etc...) to conform with "
"the WKB codes of ISO SQL/MM Part 3 / SFA 1.2.1, but there was not a clear"
" advantage in doing so, with respect to the impact on existing users of "
"OGR API."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:126
msgid ""
"Note: the mix of different ways of expression the Z dimension (wkb25DBit "
"bit for \"old\" geometry types, and +1000 for \"new\" geometry types) has"
" no direct impact on the export of geometries as WKB. There is no direct "
"coupling between the values of OGRwkbGeometryType and what goes to WKB "
"geometries. The exportToWkb() method of OGRGeometry takes a wkbVariant "
"parameter to select the variant of WKB that is wished."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:133
msgid ""
"The use of the wkb25DBit value (0x8000000) that was sometimes used to "
"test if a geometry type was 3D is now clearly deprecated since it will "
"not work for the new geometry type. The wkbHasZ() and wkbSetZ() have been"
" added to respectively test if a geometry type is 3D, or modify a "
"geometry type to be 3D. The wkb25DBit constant is now disabled for all "
"code in GDAL (but still accessible by user code) and all drivers have "
"been converted to use the new macros."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:141
msgid "A new family of functions have been used to operate on geometry types :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:189
msgid ""
"The existing wkbFlatten() is an alias of OGR_GT_Flatten(), the new "
"wkbHasZ() an alias of OGR_GT_HasZ() and wkbSetZ() an alias of "
"OGR_GT_SetZ()."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:194
msgid "New methods"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:196
msgid "In OGRGeometry class :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:261
msgid "In OGRGeometryFactory class :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:364
msgid "Implementation of existing OGRGeometry methods"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:366
msgid ""
"As GEOS does not support curve geometries for now, all GEOS related "
"operations, the ones returning a boolean value such as Intersects(), or "
"the ones returning a new geometry such as Intersection(), have been "
"adapted so that non-linear geometries are first converted to their linear"
" approximation (this might be revisited if GEOS supports curve geometries"
" in the future) When GEOS returns a geometry, and that one of the input "
"parameters was a non-linear geometry, the reverse operation is done to "
"attempt retrieving as much as possible of the curve geometry. Of course, "
"the result will not generally perfect, but it is better than nothing."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:377
msgid "Simple example doing the union of 2 half-circles that are contiguous:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:386
msgid ""
"Or using GetCurveGeometry() explicitly on the result of a buffer "
"operation:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:396
msgid ""
"The Length() operation on OGRCircularString (and thus OGRCompoundCurve) "
"uses circle geometry to compute the exact length, without falling back to"
" linear approximation. The Area() operation on OGRCurvePolygon will "
"generally need to go to linear approximation. When operating on a full "
"circle, or a curve polygon that is convex, an optimization is done to "
"avoid this (by computing the area of the polygon formed with all the "
"vertex including in the circular parts of the description, and adding the"
" area of the `circular segments "
"<http://en.wikipedia.org/wiki/Circular_segment>`__)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:407
msgid "C API changes"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:409
msgid "Deprecation:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:411
msgid ""
"wkb25DBit still present, but deprecated since incompatible with the new "
"geometry type. Use the wkbFlatten(), wkbHasZ(), wkbSetZ() macros instead"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:415
msgid "Additions:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:417
msgid "OGR_GT_xxxx (for Geometry Type): described above"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:418
msgid ""
"OGRErr OGR_G_ExportToIsoWkb( OGRGeometryH, OGRwkbByteOrder, unsigned "
"char*) : Export geometry as WKB conforming to ISO SQL/MM Part 3."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:420
msgid ""
"OGRErr OGR_G_ExportToIsoWkt( OGRGeometryH, char \\*\\* ) : Export "
"geometry as WKT conforming to ISO SQL/MM Part 3, i.e. 2.5D geometries "
"names are suffixed by \" Z\", e.g. \"POINT Z (1 2 3)\"."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:423
msgid ""
"OGRGeometryH OGR_G_Value( OGRGeometryH, double dfDistance ) : mapping of "
"existing OGRGeometry::Value()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:425
msgid ""
"int OGR_G_HasCurveGeometry( OGRGeometryH, int bLookForNonLinear ) : "
"mapping of OGRGeometry::hasCurveGeometry()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:427
msgid ""
"OGRGeometryH OGR_G_GetLinearGeometry( OGRGeometryH hGeom, double "
"dfMaxAngleStepSizeDegrees, char*\\* papszOptions) : mapping of "
"OGRGeometry::hasCurveGeometry()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:430
msgid ""
"OGRGeometryH OGR_G_GetCurveGeometry( OGRGeometryH hGeom, char*\\* "
"papszOptions ) : mapping of OGRGeometry::hasCurveGeometry()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:432
msgid ""
"void OGRSetNonLinearGeometriesEnabledFlag(int bFlag) : discussed in "
"Backward compatibility section"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:434
msgid ""
"int OGRGetNonLinearGeometriesEnabledFlag() : discussed in Backward "
"compatibility section"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:438
msgid "Changes in drivers"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:440
msgid ""
"GML geometry importer: Arc, ArcString, ArcByBulge, ArcByCenterPoint, "
"Circle and CircleByCenterPoints GML elements will be returned as circular"
" string OGR geometries. If they are included in other GML elements such "
"as CurveComposite, MultiCurve, Surface, corresponding non-linear OGR "
"geometries will be returned as well. When reading geometries that are "
"made of or consist of Surface, MultiSurface, Curve, MultiCurve, an effort"
" is made to return the OGR geometry class of a linear type as much as "
"possible, i.e. OGRCurvePolygon, OGRCompoundCurve, etc... will only be "
"returned if there's a circular string in the geometry."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:451
msgid ""
"GML geometry exporter: can generate ArcString and Circle GML elements "
"when passed a geometry with circular string in it."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:454
msgid ""
"GML driver: Can read/write all the new geometry types. When reading GML3 "
"application schemas, declarations of geometry fields such as "
"CurvePropertyType, SurfacePropertyType, MultiCurvePropertyType or "
"MultiSurfacePropertyType will be also interpreted as being potential non-"
"linear geometries, and corresponding OGR geometry type will be used for "
"the layer geometry type, and the geometries of the feature will also "
"follow that layer geometry type. This can affect the WFS drivers."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:463
msgid ""
"NAS driver: Can return the new geometry types. NAS layers will use the "
"new geometry types only if the NAS file contains arcs."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:466
msgid ""
"PG/PostGIS: Can read/write all the new geometry types for both PostGIS "
"2.X and PostGIS 1.X. For PostGIS 1.X compatibility, special processing "
"must be done in the importFromWkb()/exportToWkb() to deal with the non "
"standard codes used by PostGIS 1.X for curvepolygon, multicurve and "
"multisurface. This is done with a wkbVariantPostGIS1 value added to "
"OGRwkbVariant enumeration used by those methods."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:473
msgid ""
"PGDump: Can write all new geometry types. Above remark related to the "
"differences among version make it important to specify correctly the "
"POSTGIS_VERSION dataset creation option."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:477
msgid ""
"GeoPackage: Can read/write all the new geometry types. Note: this isn't "
"in the core of the GeoPackage specification, but it is still a registered"
" extension."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:481
msgid ""
"SQLite: Can read/write all the new geometry types for databases that are "
"NOT Spatialite databases, since Spatialite does no support curve geometry"
" types. However an attempt (well a hack) is done so that the SQLite SQL "
"dialect can still be used. Basically when converting a OGR geometry to "
"Spatialite, if it is of one of the curve geometry type, the resulting "
"blob will first contain the spatialite compatible blob of the linear "
"geometry, and afterwards the WKB of the curve geometry. Spatialite "
"functions, if called with a ST\\_ function for example, will ignore the "
"later one. When reading a blob from sqlite, if the added WKB of the curve"
" geometry is still there, it will be used. Otherwise the spatialite "
"geometry blob will be used. So SELECT statement just selecting the "
"geometry column without doing any operation on it should preserve curve "
"geometries."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:495
msgid "MEM: Can read/write all the new geometry types."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:497
msgid "CSV: Can read/write all the new geometry types."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:499
msgid ""
"VRT: Declared as compatible with all the new geometry types. Actual "
"capability will depend on the underlying layers wrapped by the VRT."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:503
msgid "Changes in utilities"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:505
msgid ""
"ogr2ogr: the new geometry names (CIRCULARSTRING, etc...) are supported in"
" the -nlt option. \"-nlt CONVERT_TO_LINEAR\" can also be used to ask "
"curve geometries to be converted into their linear approximation ( what "
"is used to do that is forceTo(xxx, OGR_GT_GetLinear()) ). Note: this "
"isn't strictly necessary as all drivers should be able to deal with the "
"non-linear geometry types with the compatibility mechanism described in "
"Backward compatibility. But this might be useful to produce a PostGIS "
"table or GeoPackage database with linear geometry types even if the "
"source contains non-linear geometries. \"-nlt CONVERT_TO_LINEAR\" can be "
"combined with \"-nlt PROMOTE_TO_MULTI\"."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:518
msgid "Changes in SWIG bindings"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:520
msgid "Addition of :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:522
msgid "the new geometry types as ogr.wkbXXXXX"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:523
msgid "ogr.ForceTo()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:524
msgid "Geometry.ExportToIsoWkt()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:525
msgid "Geometry.ExportToIsoWkb()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:526
msgid "Geometry.HasCurveGeometry(int bLookForCircular = FALSE)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:527
msgid ""
"Geometry.GetLinearGeometry(double dfMaxAngleStepSizeDegrees = "
"0.0,char*\\* options = NULL)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:529
msgid "Geometry.GetCurveGeometry(char*\\* options = NULL)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:530
msgid "ogr.SetNonLinearGeometriesEnabledFlag(int bFlag)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:531
msgid "ogr.GetNonLinearGeometriesEnabledFlag()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:532
msgid "ogr.GT_xxxxx functions"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:534
msgid "Using ogr.wkb25DBit will issue a deprecation warning"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:537
msgid "Related changes that are *NOT* included in this RFC"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:539
msgid ""
"Support for other ISO SQL/MM geometries such as Polyhedral Surface, "
"Triangulated Irregular Network (TIN), Triangle."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:541
msgid "Support for the M (Measure) dimension of geometries."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:542
msgid ""
"Upgrade of other drivers that could make use of curve geometries : MSSQL "
"Spatial, Oracle Spatial, DXF, DWG, ..."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:544
msgid ""
"Support for arbitrary new geometry types: Conceptually one could hope "
"that a new class extending OGRCurve (Bezier or Spline curve) for example "
"could be added without touching OGR core. This isn't currently possible: "
"changes in OGRGeometryFactory and the OGR_GT\\_ functions would be needed"
" to remove a few hardcoded assumptions."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:551
msgid "Backward compatibility"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:554
msgid "Regarding code using GDAL"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:556
msgid ""
"Many applications will not be able to properly deal with the new geometry"
" types that may now be returned by some drivers. If they don't want to "
"test the geometry type and explicitly calling the conversion function, "
"they can call OGRSetNonLinearGeometriesEnabledFlag(FALSE) (the default "
"value is TRUE, i.e. non-linear geometries can be returned). In which "
"case, they will be transformed into their closest linear geometry, by "
"doing linear approximation, with OGR_G_ForceTo()."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:564
msgid ""
"This flag has only an effect on the OGR_F_GetGeometryRef(), "
"OGR_F_GetGeomFieldRef(), OGR_L_GetGeomType(), OGR_GFld_GetType() and "
"OGR_FD_GetGeomType() C API, and corresponding methods in the SWIG "
"bindings."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:569
msgid ""
"Libraries should generally *not* use that method, since that could "
"interfere with other libraries or applications."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:572
msgid ""
"Note that it does *not* affect the behavior of the C++ API. It has been "
"deemed dangerous/complicated to try doing that at the C++ level as it "
"could confuse drivers since they might call GetGeomType() for example."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:577
msgid "Regarding OGR drivers"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:579
msgid ""
"Drivers that can deal with the new geometry types SHOULD declare the new "
"dataset level ODsCCurveGeometries AND layer level OLCCurveGeometries "
"capabilities. The virtual methods CreateFeature() and SetFeature() "
"implemented by drivers have been renamed ICreateFeature() and "
"ISetFeature(). OGRLayer has now a non-virtual CreateFeature() and "
"SetFeature() that checks if the layer has curve geometry capability. If "
"it has not, and that the passed feature has non-linear geometries, they "
"will be transparently converted to their linear approximation before "
"calling the driver ICreateFeature()/ISetFeature() method. Similarly the "
"CreateLayer() method at datasource level will convert the passed geometry"
" type to a non-linear corresponding type if necessary."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:591
msgid ""
"All in-tree drivers have been converted to switch from CreateFeature() to"
" ICreateFeature() and SetFeature() to ISetFeature(). Out-of-tree drivers "
"will have to be adapted similarly otherwise those methods will fails (the"
" now non-virtual methods in OGRLayer class will try to create the default"
" implementation of the same class, which will fail)."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:598
msgid "Documentation"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:600
msgid ""
"All new methods and OGR geometry classes are documented. Driver "
"documentation is updated when necessary. MIGRATION_GUIDE.TXT is updated "
"with a summary of the text of this RFC."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:605
msgid "Testing"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:607
msgid ""
"Very few changes have been made so that the existing autotest suite still"
" passes. Very comprehensive testing of new geometry classes and "
"conversion methods has been added to ogr_geom.py and ogr_gml_geom.py. "
"Updated drivers have received new tests also."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:613
msgid "Implementation"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:615
msgid ""
"Implementation will be done by Even Rouault. Coordinated with Sourcepole "
"(see `QGIS Enhancement 8: Geometry redesign <https://github.com/mhugent"
"/QGIS-Enhancement-Proposals/blob/master/QEP-8-geometry_redesign.rst>`__),"
" sponsored by Swiss QGIS User Group."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:620
msgid ""
"The proposed implementation lies in the \"curve_geometries\" branch of "
"the `https://github.com/rouault/gdal2/tree/curve_geometries "
"<https://github.com/rouault/gdal2/tree/curve_geometries>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:624
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/curve_geometries "
"<https://github.com/rouault/gdal2/compare/curve_geometries>`__"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:628
msgid "Voting history"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:630
msgid "+1 from TamasS, JukkaR and EvenR"
msgstr ""

#~ msgid ""
#~ "curve polygon: polygon consisting of one"
#~ " outer ring, and zero or more "
#~ "inner ring. Each ring can be one"
#~ " of the curve implementations: line "
#~ "strings, circular strings, compound curves."
#~ msgstr ""

#~ msgid ""
#~ "curve polygon: polygon consisting of one"
#~ " outer ring, and zero or more "
#~ "inner rings. Each ring can be one"
#~ " of the curve implementations: line "
#~ "strings, circular strings, compound curves."
#~ msgstr ""

